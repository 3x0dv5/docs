# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011, Regents of the University of Minnesota
# This file is distributed under the same license as the MapServer package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MapServer 5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-05-11 22:18\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../en/tutorial/background.txt:4
# 703a0150cc87434792d5794c3236edd2
msgid "Tutorial Timeframe"
msgstr ""

#: ../../en/tutorial/background.txt:6
# 029e6c3ff445402e8061f32df5782d28
msgid "While some users can go through this tutorial in one day, those who work on each example in detail can probably expect to finish in one week."
msgstr ""

#: ../../en/tutorial/background.txt:10
# 92e2d9b913034375aec849b7551e28a0
msgid "Tutorial Data"
msgstr ""

#: ../../en/tutorial/background.txt:12
# 6d46c627602949fd8728014b5940c792
msgid "The dataset used in this tutorial was taken from the U.S. Department of the Interior's National Atlas of the United States. You can visit their web site at http://www.nationalatlas.gov. The dataset was clipped to the upper great lakes region (Minnesota, Michigan, and Wisconsin) to reduce storage size. Additional raster images were added courtesy of the TerraSIP project at the University of Minnesota. When using this tutorial, you are encouraged to use your own dataset."
msgstr ""

#: ../../en/tutorial/background.txt:20
# f21f626bcd5b428887ccd3ea86041970
msgid "Like MapServer itself, this tutorial is open and customizable to anyone. This was done in the hope that someone (or some folks) will help design and develop it further."
msgstr ""

#: ../../en/tutorial/background.txt:24
# 5cec543cb9f44d59b01db8cc02acb954
msgid "Download the data (and all html files) for this tutorial at http://download.osgeo.org/mapserver/docs/mapserver-tutorial.zip."
msgstr ""

#: ../../en/tutorial/background.txt:27
# 0b7ef23442634f6a8846e12599912ab5
msgid "Before Using the Tutorial"
msgstr ""

#: ../../en/tutorial/background.txt:29
# 55df323019bc42138003e1afdb33e2e0
msgid "There are some prerequisites to using this tutorial:"
msgstr ""

#: ../../en/tutorial/background.txt:31
# d4491b3ec6ed42e0afff7e24554c3e9c
msgid "Users will need to have a web server installed and running on your computer. This web server has to have support for common gateway interface (CGI) programs."
msgstr ""

#: ../../en/tutorial/background.txt:34
# e3bce54112bb4179ba9152a45f62ea4e
msgid "Users should have a basic understanding of web servers and internet security. A poorly configured web server can easily be attacked by malicious people. At the very least your software installation will be corrupted and you'll lose hours of productivity, at worst your computer can be used to attack other computers on the internet."
msgstr ""

#: ../../en/tutorial/background.txt:40
# 6283a9ff565d4ad2bef9b78a27ef8c91
msgid "It is recommended that users of this tutorial read the :ref:`Introduction to MapServer <introduction>` before proceeding with this tutorial."
msgstr ""

#: ../../en/tutorial/background.txt:44
# bde7a072ba8844008fec1bacf8cf9248
msgid "To use this tutorial, users will need to have a web server and a MapServer CGI program (mapserv or mapserv.exe) installed in their systems. MapServer source code is available for download :ref:`here <download>`. Documentation exists on how to compile and install MapServer:"
msgstr ""

#: ../../en/tutorial/background.txt:49
# 6f16a21234e744fe9f2bcf9facd5d8ce
msgid "for UNIX users, please read the :ref:`MapServer UNIX Compilation and Installation HOWTO <unix>`."
msgstr ""

#: ../../en/tutorial/background.txt:50
# 113827bf265345b4a039993f31e93b02
msgid "Windows users should read the :ref:`MapServer Win32 Compilation and Installation HOWTO <win32>`"
msgstr ""

#: ../../en/tutorial/background.txt:52
# 96972b22981f4096acefc96cd64e973d
msgid "In addition, Windows users can also download precompiled binaries from :ref:`here <download>`."
msgstr ""

#: ../../en/tutorial/background.txt:56
# 05d122c433fd4f75912f2dcfe4f2ccbb
msgid "Windows, UNIX/Linux Issues"
msgstr ""

#: ../../en/tutorial/background.txt:59
# 4dc2e51741ad48d3ab8de5f73fbcf175
msgid "Paths"
msgstr ""

#: ../../en/tutorial/background.txt:61
# 2b24236f5e7145759cf3f267cc41fccd
msgid "This tutorial was created in Linux/UNIX but should work with minimal changes on Windows platform. The main differences are the paths in the map files. Windows users need to specify the drive letter of the hard disk where their tutorial files reside. Here's an example:"
msgstr ""

#: ../../en/tutorial/background.txt:66
# e3cb00ed228f43eabff17079ee504855
msgid "A UNIX map file might include a parameter like this:"
msgstr ""

#: ../../en/tutorial/background.txt:72
# 42e778b72e2746a9939ac13053b684d7
msgid "In Windows, the same parameters might look like this:"
msgstr ""

#: ../../en/tutorial/background.txt:78
# 2c6e3178ade44e58aacb145bbc0e55cb
msgid "or:"
msgstr ""

#: ../../en/tutorial/background.txt:84
# dfa443a7ec784ce8aaa7bf6c6828e4aa
msgid "Notice that either slash or backslash works in Windows. The usual backslash may work well for you if you want to make a distinction between virtual (as in URLs or web addresses) and local paths in your map file. However, if you plan to move your application to UNIX at some point, you'll have the tedious task of switching all backslashes to slashes."
msgstr ""

#: ../../en/tutorial/background.txt:90
# 6f5afe9fc1424b4686f4a2d82fb9fb48
msgid "While we're on the subject of paths, keep in mind that paths in mapfiles are typically relative to the system's root directory: the slash (\"/\") in UNIX or some drive letter (\"C:\") in Windows. This is true except when specifically asked to enter a URL or when referencing a URL. When working with HTML template files, paths are relative to the web server's root directory.  i.e., \"/tutorial/\" is relative to \"http://demo.mapserver.org/\". Please read http://www.alistapart.com/articles/slashforward/ for a few insights on URLs."
msgstr ""

#: ../../en/tutorial/background.txt:99
# 3f9bea66c7ca40a786b7af3fda3ab510
msgid "Executable"
msgstr ""

#: ../../en/tutorial/background.txt:101
# 26884b127821435490a31af2dc58c4c1
msgid "Another issue is that UNIX executable files don't require a .EXE or .COM extensions, but they do in Windows. If you are using Windows, append .exe to all instances of \"/cgi-bin/mapserv\" or \"/cgi-bin/mapserv50\" to make it \"/cgi-bin/mapserv.exe\" or \"/cgi-bin/mapserv50.exe\"."
msgstr ""

#: ../../en/tutorial/background.txt:107
# 0c482076a9b94b87af1b7f2df3d73a67
msgid "Other Resources"
msgstr ""

#: ../../en/tutorial/background.txt:109
# 2f2a054f60b640029a328360c0125add
msgid "Other documentation exist to give you better understanding of the many customizations MapServer offer. Please visit the MapServer documentation page at http://www.mapserver.org. There you will find several HOWTO documents, from getting started to using MapScript, a scripting interface for MapServer."
msgstr ""

#: ../../en/tutorial/background.txt:116
# 9d35be92faf0463e9a0a777ba4f10b88
msgid ":ref:`Back to Tutorial home <tutorial>` | :ref:`Proceed to Section 1 <section1>`"
msgstr ""

#: ../../en/tutorial/example1-1.txt:6
# f26e63be9f8d401b91ab7036564f90c9
msgid "Example 1.1"
msgstr ""

#: ../../en/tutorial/example1-1.txt:8
# a309c6d8784a47b08406cadd6848f0a0
msgid "Map With A Single Layer"
msgstr ""

#: ../../en/tutorial/example1-1.txt:12
# 81e019067e844246a98715747332992a
msgid "MapServer can create an image and dump it to a local directory or send it directly to the requesting web browser, as in this example. You can view it without the need for an html page, just enter this URL: `<http://localhost/cgi-bin/mapserv.exe?map=/ms4w/apps/tutorial/htdocs/example1-1.map&layer=states&mode=map>`_ (Remember to replace \"<insert hostname or IP address here>\" with your web server's name, e.g. \"localhost\", or its IP address, e.g. \"127.0.0.1\")."
msgstr ""

#: ../../en/tutorial/example1-1.txt:14
# 226a6592ddfc4c2bbd48dd84d9b8fe39
msgid "This URL can be broken into three parts: the first part, http://<insert hostname or IP address here>/cgi-bin/mapserv.exe?, calls the MapServer CGI program. If you invoke it as is you will get this familiar message:"
msgstr ""

#: ../../en/tutorial/example1-1.txt:20
# d234b94004ad412d971a09e3e838cd21
msgid "The next three parts are what make up the query string.  The query string contains the CGI parameters (variables and their values), with each parameter separated by an ampersand (&amp;). So, looking at the query string, the first parameter \"map\" has a value \"/ms4w/apps/tutorial/htdocs/example1-1.map\"--this tells the MapServer CGI program (mapserv or mapserv.exe) what mapfile to process/parse. The next parameter &quot;layer=states&quot;, tells mapserv.exe to \"turn on\" the states layer--recall that we named our layer object \"states\".  The last parameter, &quot;mode=map&quot;, tells mapserv.exe what to do with the output from the mapfile. In this case it tells mapserv.exe to dump the image directly to the web browser (the client), without first creating a temporary image on the server. The MapServer &quot;mode&quot; CGI variable takes values other than &quot;map&quot;. For example if you use &quot;mode=browse&quot;, MapServer will dump the image to a temporary directory on the server. The browse mode will not work now but we'll come back to it again later."
msgstr ""

#: ../../en/tutorial/example1-1.txt:23
# f8256f8f0ca44c5f8aeeb8e181fde711
msgid "Mapfile Structure"
msgstr ""

#: ../../en/tutorial/example1-1.txt:25
# 8e136a8f48644109a1561b40ef841598
msgid "This is what the mapfile looks like: :ref:`Example1-1.map <example1-1-map>`."
msgstr ""

#: ../../en/tutorial/example1-1.txt:27
# 0efcca53941a4837a7bbb1aaa153588f
msgid "The :ref:`MAPFILE <mapfile>` is MapServer's basic configuration mechanism. It is made up of \"objects\" and each object can have keywords or other objects. It has a hierarchical structure such that some objects fall under other objects... on top of this hierarchy is the MAP object, all other objects belong to it. This example shows a very straightforward heirarchy of objects.  As you go through each example, the complexity of these hierarchical trees will increase."
msgstr ""

#: ../../en/tutorial/example1-1.txt:29
# 52b44c32c3694ef98189c5b58da2b28a
msgid "A few quick notes about mapfiles: we define each object in the mapfile with the object name and we close it with \"END\" and we precede comments with a pound (#) sign."
msgstr ""

#: ../../en/tutorial/example1-1.txt:31
# 09d99a1014e84fc6b5817f74e5cc0ab0
msgid "Let's break \"example1-1.map\" down by objects. Its structure looks like this:"
msgstr ""

#: ../../en/tutorial/example1-1.txt:42
# 3e61e2b8615f49c58fd322646d26ddde
msgid "MAP Object"
msgstr ""

#: ../../en/tutorial/example1-1.txt:44
# 76379bebc25a4103ba1bacae95411098
msgid "Let's look at the keywords (parameters) within the MAP object:"
msgstr ""

#: ../../en/tutorial/example1-1.txt:47
# 2fc0049a8c7f49de97e16698af09d6e1
msgid "Every mapfile starts with the :ref:`MAP <map>` object--the entire mapfile is the MAP object."
msgstr ""

#: ../../en/tutorial/example1-1.txt:51
# 02e535d740684216a519c2d4e8aefc78
msgid "The keyword IMAGETYPE is used to define which image format the MapServer CGI program should use for output. In this case we are using indexed color PNG (similar to GIF). This could be GIF, if we compiled the GD library with GIF support, WBMP, or JPEG. We can also specify other output options (PDF, SWF, GeoTIFF) provided that we compiled support for them and specify them with the OUTPUTFORMAT object. The OUTPUTFORMAT goes beyond the scope of this tutorial but you can find out more about by reading through documentations in the MapServer web site."
msgstr ""

#: ../../en/tutorial/example1-1.txt:62
# e49ed79d12214e3cbb6855b91b29d35c
msgid "This parameter specifies the output extent of our map--the bounding box of our initial map.  The EXTENT values are given in this format:"
msgstr ""

#: ../../en/tutorial/example1-1.txt:69
# 7d6a9df5d0a24f0b99dcdd66a3f865c1
msgid "with spaces separating each value. This needs to be in the same units as the data or, if specifying a different output projection, in the same units as the output projection."
msgstr ""

#: ../../en/tutorial/example1-1.txt:73
# f975c8a5df254db08825ea4a0a45d0a8
msgid "In this example our data is in geographic projection so the units are in decimal degrees.  You can use the utility `ogrinfo <http://gdal.osgeo.org/ogr_utilities.html>`_, which is part of the GDAL/OGR library package, to get the extent of a particular shapefile (or other supported vector formats).  Here is the command I used to get the extent for this example:"
msgstr ""

#: ../../en/tutorial/example1-1.txt:84
# d583c63211e045b1a4c39fbb5c89d901
msgid "This returned the following output:"
msgstr ""

#: ../../en/tutorial/example1-1.txt:100
# b3aaf93de7134229ba44499f93e3621b
msgid "You can also use ArcView or other open source GIS packages--QGIS, Thuban, etc."
msgstr ""

#: ../../en/tutorial/example1-1.txt:102
# 7fa63e2e8d214f5ebb24fbecd147e718
msgid "Feel free to change the values of EXTENT to get a better understanding of how it changes your map."
msgstr ""

#: ../../en/tutorial/example1-1.txt:105
# 6b65d0b5c80343c7864d5caad4859a08
msgid "This is the size of the image (the map) that MapServer will generate, in pixels. So our map is 400 pixels wide by 300 pixels high.  Again, change this to your heart's content and see how it affects your map."
msgstr ""

#: ../../en/tutorial/example1-1.txt:110
# 06749d0230434bb7a7fb72a206cb7fee
msgid "This is the path to your data layers. You can provide absolute paths (i.e. \"/ms4w/apps/tutorial/data\" or \"C:/ms4w/apps/tutorial/data\") or paths relative to your mapfile's location (in this example, you'd use \"../data\"). This path doesn't have to be web accessible, and probably shouldn't be unless you want anyone to download your raw data. It has nothing directly to do with the web so don't even think of URLs here--just make sure that the user running the web server (usually \"nobody\" or \"apache\" in the *nix world) can READ the data in the SHAPEPATH."
msgstr ""

#: ../../en/tutorial/example1-1.txt:120
# 4a06d0e58f484d9f8675bf70837bc32f
msgid "This is the background color of your map. The values are RGB values so 255 Red, 255 Green, and 255 Blue which results in a white background. Go ahead and play with this values."
msgstr ""

#: ../../en/tutorial/example1-1.txt:125
# 3de3836d57654880b1ff551671dca2e3
msgid "LAYER Object"
msgstr ""

#: ../../en/tutorial/example1-1.txt:127
# 1b8851de470d4f9685c0b9042bd91a6f
msgid "Now let's look at the LAYER object parameters:"
msgstr ""

#: ../../en/tutorial/example1-1.txt:130
# 994abf4433994b1ab7ed37fbc8f7b5ff
msgid "Marks the beginning of a :ref:`LAYER <layer>` within the MAP object. You can specify as many layers as you'd like although you are limited to 100, by default. To change this limit, you will have to edit the map.h header file (in the soure tree) and recompile MapServer."
msgstr ""

#: ../../en/tutorial/example1-1.txt:136
# e81cfaa55f3d43589b51013585865793
msgid "This is the layer identifier.  MapServer uses this name to toggle the layer on and off.  It won't work in this example as we have the layer STATUS set to default.  We will get back to this in later examples."
msgstr ""

#: ../../en/tutorial/example1-1.txt:141
# 22252d8515244699a1b41da40cb429d8
msgid "The name of the data (shapefile in this case). MapServer supports vector data formats other than ESRI's shapefile through the use of OGR library (part of the GDAL software package). Please visit the GDAL project web site at `<http://gdal.osgeo.org/>`_ and read `<http://gdal.osgeo.org/ogr/>`_ to know more about the different vector formats MapServer supports. In addition, Jeff McKenna and Tyler Mitchell have written a detailed :ref:`guide to using vector data for MapServer <vector>`."
msgstr ""

#: ../../en/tutorial/example1-1.txt:151
# 2d98bf19647749aeb8ce84d8b91c8104
msgid "What type of data is it? If it's a vector data, you can specify whether it is a POLYGON, LINE (you use LINE even if your data is technically a POLYLINE), or a POINT. You can also specify RASTER or ANNOTATION data. Here we want to display POLYGON."
msgstr ""

#: ../../en/tutorial/example1-1.txt:157
# a7b5951efe9846d09df4e628b4a35d43
msgid "Layers are turned on or off based on their STATUS. DEFAULT is always on. ON or OFF works when the LAYER name is passed as part of the query string."
msgstr ""

#: ../../en/tutorial/example1-1.txt:161
# 61abde5758f94d51976b676d2cf864d7
msgid "CLASS Object"
msgstr ""

#: ../../en/tutorial/example1-1.txt:163
# 713d05fb921848ed941e6c14fdf1e6b5
msgid "Let's look at the CLASS object parameters:"
msgstr ""

#: ../../en/tutorial/example1-1.txt:166
# 3dc1acb5f7c840f49a87cdac6720f6ca
msgid "Marks the beginning of a :ref:`CLASS <class>` object within the LAYER object. You can specify as many classes within a layer although you are limited to 50 by default. You'll have to recompile MapServer to change this default value."
msgstr ""

#: ../../en/tutorial/example1-1.txt:172
# ad4518df8f8f466090e7d5bb80ca9090
msgid "The descriptive identifier for this CLASS. LAYER objects can have multiple classes, just like MAP objects can have multiple layers. CLASS names are used by MapServer as labels for the legend so make sure to use an appropriate descriptive name when naming classes.  We will talk about legends later in this tutorial."
msgstr ""

#: ../../en/tutorial/example1-1.txt:179
# b48a75d963a14df691a3d8ea7c16d146
msgid "STYLE Object"
msgstr ""

#: ../../en/tutorial/example1-1.txt:181
# f66c1ba3f498432791244ca12b9a81b5
msgid "And finally, let's look at the STYLE object parameters:"
msgstr ""

#: ../../en/tutorial/example1-1.txt:184
# d4717ef81bf043d581893db9ff2b1d57
msgid "Marks the beginning of the :ref:`STYLE <style>` object.  You can define multiple styles within a class--this is useful when you want to overlay a style over another."
msgstr ""

#: ../../en/tutorial/example1-1.txt:189
# 6adb14f8884c41819bc4a288d45508f1
msgid "This is the fill color of the polygon. In case the TYPE is LINE, this is the line color. The values are in RGB format."
msgstr ""

#: ../../en/tutorial/example1-1.txt:193
# 49eae941a6ef4442a64c05dddca4cca8
msgid "This is the outline color of the polygons. The values are in RGB format. MapServer doesn't draw polygon outlines by default, so if you want to see polygon boundaries, you will want to define an OUTLINECOLOR."
msgstr ""

#: ../../en/tutorial/example1-1.txt:197
# 3945d7812574440484a93532e4574da8
msgid "This ends the first example in this tutorial. You are encouraged to change the values of the keywords in the mapfile. It will help you understand what these keywords do."
msgstr ""

#: ../../en/tutorial/example1-1.txt:201
# cd43fc82aec54487b0b7ed6025fc21fd
msgid ":ref:`Back to Section 1 index <section1>` | :ref:`Proceed to Example 1.2 <example1-2>`"
msgstr ""

#: ../../en/tutorial/example1-1-map.txt:4
# 48f262ac4abd45399aeb2e9189eb4b6c
msgid "Example1-1.map"
msgstr ""

#: ../../en/tutorial/example1-2.txt:5
# 6b946929f3cc489dbda65fa716f20034
msgid "Example 1.2"
msgstr ""

#: ../../en/tutorial/example1-2.txt:7
# 461b23a4375f4ebcb0b7b72b887d1aa6
msgid "Static Map with Two Layers"
msgstr ""

#: ../../en/tutorial/example1-2.txt:11
# f5bf1ee0b8a1418d8574124057c2dfd6
msgid "As in the first example, this image was generated by linking the source of the <img> tag to this URL: `<http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example1-2.map&layer=states_poly&layer=states_line&mode=map>`_. This is how most of the examples in this section work."
msgstr ""

#: ../../en/tutorial/example1-2.txt:16
# 8a93e449155a432291e274d52953f6b4
msgid "Anyway, you'll notice that the map here is the same as the first example. Yes, but the mapfile is different. Have a look."
msgstr ""

#: ../../en/tutorial/example1-2.txt:19
# 26c17904680d4c95b27c050069203558
msgid "This is what the mapfile looks like: :ref:`Example1-2.map <example1-2-map>`"
msgstr ""

#: ../../en/tutorial/example1-2.txt:23
#: ../../en/tutorial/example1-3.txt:15
#: ../../en/tutorial/example1-4.txt:22
#: ../../en/tutorial/example1-5.txt:36
# b2f7a7cd7ee24726b9ba162ae43fbaee
# 426635aba00f4afb97398672a297c9f3
# 6b8065cf3a344e278ca4b59194339715
# 1e8347df69c347159ec1a569d492066b
msgid "MapFile Structure"
msgstr ""

#: ../../en/tutorial/example1-2.txt:25
#: ../../en/tutorial/example1-3.txt:19
#: ../../en/tutorial/example1-5.txt:40
# 2d5f206d0fec458ebbaf936759b316df
# 315672ff82904ef5a5dc7b9143ee26c3
# f585a73a19ce4092a3a023839475a7c4
msgid "The mapfile structure, by objects, looks like this:"
msgstr ""

#: ../../en/tutorial/example1-2.txt:34
# 389dc731fa0d4799b36d54fedd74c73b
msgid "Here we split the original layer into two layers. The first layer is still a polygon layer but the :ref:`STYLE object <style>` no longer has OUTLINECOLOR, such as:"
msgstr ""

#: ../../en/tutorial/example1-2.txt:52
# 2d78d55b888e48999ee4b1c10eb4769b
msgid "The second layer is similar to the first except that the TYPE is changed to LINE and the COLOR in the STYLE is changed to the same color as the OUTLINECOLOR in the first example. This produces the same image as the first one."
msgstr ""

#: ../../en/tutorial/example1-2.txt:72
# 4fa37233ba794f7a941208d5613788a5
msgid "So, why do it this way?"
msgstr ""

#: ../../en/tutorial/example1-2.txt:74
# 81318156573a4939b691c1bdd4750e00
msgid "If we continue to add layers on top of the states layer, the outline will most likely be covered up by these other layers.  To still see the state boundaries after we add these other layers, we have to separate the states boundary line layer from the states polygon layer and put it on top of the other other layers. There is order in how we define/add layers and you'll see it clearly as we proceed in this section."
msgstr ""

#: ../../en/tutorial/example1-2.txt:83
# 5259a21f4b0045aa805f3d505bcbe376
msgid ":ref:`Back to Example 1.1 <example1-1>` | :ref:`Proceed to Example 1.3 <example1-3>`"
msgstr ""

#: ../../en/tutorial/example1-2-map.txt:4
# 40b8665586814ea9b03a31e0a06047f1
msgid "Example1-2.map"
msgstr ""

#: ../../en/tutorial/example1-3.txt:5
# 7f25797297d84a639c1364b15cab78fd
msgid "Example 1.3"
msgstr ""

#: ../../en/tutorial/example1-3.txt:7
# e00c763f5c8c4e78be51283f4622b35f
msgid "Displaying Classes in a Layer"
msgstr ""

#: ../../en/tutorial/example1-3.txt:9
# 266f24218c76473d80f0783ffa4623ba
msgid "By using non-spatial attribute information in the data, we can create a map like this:"
msgstr ""

#: ../../en/tutorial/example1-3.txt:17
# 26db662b797a460cafb04e0bf7bb6219
msgid "This is what the mapfile looks like: :ref:`Example1-3.map <example1-3-map>`."
msgstr ""

#: ../../en/tutorial/example1-3.txt:31
# ce982789be324cb2be8dc87e31484669
msgid "Keywords"
msgstr ""

#: ../../en/tutorial/example1-3.txt:33
# b88ca6b843124bc2a44512d60086d9a9
msgid "Our mapfile still only has two layers but the polygon layer has been broken down into two classes. Let's have a look at the additional parameters:"
msgstr ""

#: ../../en/tutorial/example1-3.txt:37
# 6d0f599dffa64c4ea5dfa2b73ca85486
msgid "This keyword is used to specify what attribute to use in separating the class objects. In this example that attribute is \"CLASS\". If you open the database file associated with this layer's shapefile, you'll see that there's a column (attribute) called \"CLASS\"."
msgstr ""

#: ../../en/tutorial/example1-3.txt:42
# 6f9f9336c8694396ae44ef83a70ba342
msgid "How do we know which attribute to use?  Well, database records in shapefiles are stored in DBF files.  You can open it in a spreadsheet program such as Openoffice.org's Calc, or in a desktop GIS software such as QGIS, Thuban, or ArcView.  If your data came with a metadata (and it should!), you can skim through through that metadata file for attribute information.  You can also use \"ogrinfo\" to display basic attribute info in your shapefiles--look back at example 1.1 (the last few lines after \"Layer SRS WKT:\" show the attribute names and types)."
msgstr ""

#: ../../en/tutorial/example1-3.txt:52
# b4002c0c295542b68b758bccd37ce98e
msgid "For each class, we specify what attribute value to use. This is the simplest form of EXPRESSION. EXPRESSIONs can be even more complex than this, allowing one to evaluate regular or logical expressions. Please look at the mapfile reference page to see what you can do with EXPRESSION."
msgstr ""

#: ../../en/tutorial/example1-3.txt:60
# 4eae64a1e7474de4986a16419ad6e2bd
msgid ":ref:`Back to Example 1.2 <example1-2>` | :ref:`Proceed to Example 1.4 <example1-4>`"
msgstr ""

#: ../../en/tutorial/example1-3-map.txt:4
# 26125292529740f2a58ba49aefb915b4
msgid "Example1-3.map"
msgstr ""

#: ../../en/tutorial/example1-4.txt:5
# b1f67a404c434baab3b9ac3a2198a9c4
msgid "Example 1.4"
msgstr ""

#: ../../en/tutorial/example1-4.txt:7
# 2c74006be46047c98ec57cf373a0fdc2
msgid "Labeling the Map"
msgstr ""

#: ../../en/tutorial/example1-4.txt:9
# ac1ef539b2444fd9aa907f4715010e9e
msgid "We can also add labels to our map..."
msgstr ""

#: ../../en/tutorial/example1-4.txt:13
# 584e7e51ee674daeb6a59f052ae0c862
msgid "MapServer has a very flexible labeling engine.  It supports native bitmap as well as truetype fonts.  Font scaling is supported with truetype. The labeling angles and placements can be customized...  If you take the time to learn the many parameters involved in creating good labels, you will be rewarded with informative and aesthetically pleasing maps."
msgstr ""

#: ../../en/tutorial/example1-4.txt:19
# b9c06866b3ff48d4b992c10d89fe7ba8
msgid "This is what the map file looks like: :ref:`Example1-4.map <example1-4-map>`."
msgstr ""

#: ../../en/tutorial/example1-4.txt:24
# 6d30c75cabb94849ae804d06ca4a6ed2
msgid "The map file structure, by objects, looks like this:"
msgstr ""

#: ../../en/tutorial/example1-4.txt:34
# 75cdf5ca17ef440a99d3a1446bf983d1
msgid "The LABEL Object and Keywords"
msgstr ""

#: ../../en/tutorial/example1-4.txt:36
# f8091ad7eea94461a124937ed14e93b0
msgid "Here we introduce a few more parameters along with the LABEL object:"
msgstr ""

#: ../../en/tutorial/example1-4.txt:39
# 7ac8cdfb317743caa9e41a1d9b39f6e0
msgid "Here we specify the full path to our truetype fonts list (or fontset) file. This file lists each of the available fonts. See the file itself and the :ref:`MapServer fontset documentation <fontset>` for more info. FONTSET is a parameter of the MAP object."
msgstr ""

#: ../../en/tutorial/example1-4.txt:46
# 902c8d587f72480a88131829643f19e8
msgid "This specifies which data attribute to use for labeling, in this case \"STATE\". LABELITEM is a parameter of the LAYER object."
msgstr ""

#: ../../en/tutorial/example1-4.txt:50
# 40232bdbd45a4219a9820ee9b41f835b
msgid "Marks the beginning of the LABEL object. The label object can be used under other objects (i.e. the SCALEBAR object)."
msgstr ""

#: ../../en/tutorial/example1-4.txt:54
# 449080d1a74b4f02b4809fcc3a1180a7
msgid "Within the LABEL object, COLOR specifies the color of the label text."
msgstr ""

#: ../../en/tutorial/example1-4.txt:57
# 68e2dc166de04b29a6b724867b8bcfb1
msgid "This specifies the shadow color of the label text."
msgstr ""

#: ../../en/tutorial/example1-4.txt:60
# 15e14644d70648f682d4b344133e976c
msgid "Specifies the shadow size. The value corresponds to the X and the Y shifts in pixels. So, \"2 2\" means two pixels wide by two pixels high."
msgstr ""

#: ../../en/tutorial/example1-4.txt:64
# 40d4a5548d4e4b67b33c22774a5d7168
msgid "Within the LABEL object, TYPE specifies what type of font to use. We have the choice of TRUETYPE or BITMAP (the built-in fonts). We choose TRUETYPE."
msgstr ""

#: ../../en/tutorial/example1-4.txt:69
# 652e62aade3c4706a46256caeba28526
msgid "If you specify TYPE as TRUETYPE, you need to specify what font to use. The value here is the \"alias\" in the font list file."
msgstr ""

#: ../../en/tutorial/example1-4.txt:73
# 6066e82f81674794a0734f69338b3523
msgid "If using truetype fonts, the value is size in pixels. If bitmap, you can say something like \"small\" or \"large\"."
msgstr ""

#: ../../en/tutorial/example1-4.txt:77
# 5979cc8f6a22494a9fe7ffc7a8da7b64
msgid "This turns truetype antialiasing on or off. Remember the value isn't on or off but TRUE or FALSE."
msgstr ""

#: ../../en/tutorial/example1-4.txt:81
# acf01ea9c3a44f38b4018761cb51f2a6
msgid "Where to position the label text in relation to the label points. The value is a combination of vertical and horizontal positions. You have the following choices for vertical alignment: C for center, U for upper, and L for lower. For horizontal alignment you have the following choices: C for center, L for left, and R for right. So, to align the label text to the center of label ID you'd use the value \"CC\" (center-center). Or if you'd like it to be on the lower left of the ID, you'd use LL. Another way is to let MapServer decide the best position for your labels. For this you would use the value \"AUTO\"."
msgstr ""

#: ../../en/tutorial/example1-4.txt:93
# 1067f6d4571248f99687034e202b1abd
msgid "Tells MapServer whether to generate incomplete label texts or not. The default here is not to generate fragments of a label text. The value is either TRUE or FALSE."
msgstr ""

#: ../../en/tutorial/example1-4.txt:98
# c8b44686b5f0498aae4907ae87e5ce7e
msgid "This is the minimum distance in pixels between duplicate labels. See what happens if you increase or decrease this value."
msgstr ""

#: ../../en/tutorial/example1-4.txt:102
# a6ba91d4589a4e3da2d86ce50a3faf4e
msgid "The padding (in pixels) for each label. This is used to enhance readability. A BUFFER of 4 pixels mean that no label will be drawn within four pixels of each other. Again, change to see how it works."
msgstr ""

#: ../../en/tutorial/example1-4.txt:106
# 913de63fdef4455284c3e3eb95f3f56d
msgid "You can also create labels separate from a POLYGON layer. You do this with the ANNOTATION data type. Have a look at the next example's map file to see how you'd implement this kind of labeling.  You will notice that the CLASS object within the \"label\" layer has a COLOR parameter value of \"-1 -1 -1\". The negative number tells MapServer to give this CLASS a transparent color (the label IDs don't show up). Once again, play with the values to understand how it affects the map."
msgstr ""

#: ../../en/tutorial/example1-4.txt:116
# 504dcd366f43464ca35a6c9d1173f565
msgid ":ref:`Back to Example 1.3 <example1-3>` | :ref:`Proceed to Example 1.5 <example1-5>`"
msgstr ""

#: ../../en/tutorial/example1-4-map.txt:4
# 6962c74ca5c24c0db9ad299bdfe01a09
msgid "Example1-4.map"
msgstr ""

#: ../../en/tutorial/example1-5.txt:5
# 01b1ef6893e54cc39461e6a871ee4b1d
msgid "Example 1.5"
msgstr ""

#: ../../en/tutorial/example1-5.txt:7
# 8a188078c4e7436c9abdd7b88987505f
msgid "Adding a Raster Layer"
msgstr ""

#: ../../en/tutorial/example1-5.txt:11
# cf20515e35f945c4b6d96f2896c7ef55
msgid "In addition to vector data support (point, lines, polygons, and annotations), MapServer can also display raster data. Through the use of GDAL library, MapServer can input and output multiple raster formats. Whereas in versions prior to 4.x raster input is limited to single layer, grayscale or indexed color images, recent MapServer versions support RGB and multispectral (multi-layer) images. This example shows how to select what layers to display when using multispectral data."
msgstr ""

#: ../../en/tutorial/example1-5.txt:20
# e28f14107c5c426694378f560b4c7956
msgid "There might be a noticeable performance hit when using RGB and multispectral images."
msgstr ""

#: ../../en/tutorial/example1-5.txt:22
# 0f400a2f5253400e91a7084e773903c2
msgid "Because MapServer 5.x uses GD version 2.0.x library to generate output images, it supports RGB (24-bit or true color) output as well. So, along with 8-bit (indexed color or grayscale) PNG, you can now also use PNG24 (true color) for output. This example uses PNG24 as IMAGETYPE."
msgstr ""

#: ../../en/tutorial/example1-5.txt:29
# 8bd05cecbdc64310affe92cec6ccd716
msgid "As with RGB input, there might be a noticeable performance hit when using PNG24."
msgstr ""

#: ../../en/tutorial/example1-5.txt:31
# b9629adf6df542bcb4ff0effa50ceab6
msgid "MapServer can actually use GDAL to generate output images as well, but that's another topic. If you want to know more about it, look at the :ref:`OUTPUTFORMAT <outputformat>` object in the mapfile reference."
msgstr ""

#: ../../en/tutorial/example1-5.txt:38
# 56afbb81d7da41e88a0af3a285595164
msgid "This is what the mapfile looks like: :ref:`Example1-5.map <example1-5-map>`"
msgstr ""

#: ../../en/tutorial/example1-5.txt:53
# 29c8226274cf4895bbf78cd3b13e57f7
msgid "When you look at the mapfile, you'll see that the new LAYER object is added below (after) the state POLYGON layer. Why? MapServer displays layers in reverse order: last in, first out (LIFO). The first layer defined in the mapfile is drawn at the bottom of the map."
msgstr ""

#: ../../en/tutorial/example1-5.txt:58
# 6c5ff3da188449c0a05f65d719dfe52d
msgid "So, if we have drawn the state POLYGON layer, it would be on the bottom. Since the raster layer gets drawn on top of it, we won't see it. That's why the first layer gets the STATUS value of OFF. The state LINE layer is defined below the raster layer so it gets drawn on top (and you can see it). This is why we separated the state LINE layer from the state POLYGON layer. Of course the labels get drawn on top of everything."
msgstr ""

#: ../../en/tutorial/example1-5.txt:65
# 25687956e38b4ac393f6498467c954c6
msgid "MapServer can automatically turn layers on or off based on the status of other layers (say you want the states polygon layer turned off when the raster layer is turned on). This is done by using the REQUIRES parameter. Keep this in mind as you might want to use it once you start creating your own MapServer applications."
msgstr ""

#: ../../en/tutorial/example1-5.txt:72
# 609bc0f873c44054addd0980139367b6
msgid "Parameters"
msgstr ""

#: ../../en/tutorial/example1-5.txt:74
# 95b625c160e14813820f6e17187150fe
msgid "Let's have a look at the new parameters introduced in the mapfile:"
msgstr ""

#: ../../en/tutorial/example1-5.txt:77
# 79a1cf19bacc43eba9d011dc871d2513
msgid "This is not new but the value \"PNG24\" is. PNG24 is the 24-bit or true-color version of the PNG format. Instead of being limited to 256 color combinations for our output image, MapServer now have millions. By the way, try changing this value back to PNG. Notice the time it takes to generate the image using either formats. In choosing between true color and indexed color, take into account the time it takes to generate the image."
msgstr ""

#: ../../en/tutorial/example1-5.txt:85
# 943a3afc64374c19a7635594bd4add05
msgid "Points to the path of the symbol definition file. The symbols in this file are referenced by the SYMBOL parameter in the :ref:`CLASS <class>` object. It's not really needed at this point but I thought I'd throw this here now. Please refer to the :ref:`Cartographic Symbol Reference <sym_construction>` for further information."
msgstr ""

#: ../../en/tutorial/example1-5.txt:91
# f2239a156af043db8f365e0b72b7be89
msgid "**DATA raster/mod09a12003161_ugl_ll_8bit.tif**"
msgstr ""

#: ../../en/tutorial/example1-5.txt:93
# f477120a1ed2488582fbe300d9c24b51
msgid "In the newly added LAYER object, the DATA parameter points to a GeoTIFF image. Like vector datasets, MapServer supports multiple raster file formats. This support is accomplished through use of the GDAL library. For more information on the different raster formats supported by MapServer and for general discussion on the use of rasters in MapServer, please read the :ref:`Raster Data Reference <raster>`."
msgstr ""

#: ../../en/tutorial/example1-5.txt:101
# 52b77832628b440cbbb5ad1fcee0d61e
msgid "When using raster data (images) we use the value RASTER for the parameter TYPE, as opposed to the POLYGON, LINE, and POINT values for vector data and ANNOTATION for label IDs."
msgstr ""

#: ../../en/tutorial/example1-5.txt:106
# 3ae2ab36e8d641378f31cc4b2af20b07
msgid "This LAYER object parameter was added in MapServer 4.x. The :ref:`PROCESSING <layer>` keyword has many values but in this case we are using it to select which bands in a multispectral image to display. The values here are strings that will be passed to the GDAL library."
msgstr ""

#: ../../en/tutorial/example1-5.txt:112
# 3c32224393fe455f920b0e837e4a7399
msgid "This parameter tells MapServer what pixel values to render as background (or ignore). You can get the pixel values using image processing or image manipulation programs (i.e. Imagine, Photoshop, Gimp)."
msgstr ""

#: ../../en/tutorial/example1-5.txt:117
# 77260fae85dd48d09d6e71036e261a3d
msgid "RGB vs Indexed Color Image"
msgstr ""

#: ../../en/tutorial/example1-5.txt:119
# 3cb2b5bb36ed4b0482c44cc842e9d069
msgid "To compare map creation speed when using RGB image as opposed to indexed color image, replace the following lines in the mapfile:"
msgstr ""

#: ../../en/tutorial/example1-5.txt:130
# 03299137719d47eeb7f4b53fdc301151
msgid "with these:"
msgstr ""

#: ../../en/tutorial/example1-5.txt:140
# 15f1ed3bf4c64ec2ad5ab960852fc842
msgid "Also, try changing the IMAGETYPE from PNG24 to PNG."
msgstr ""

#: ../../en/tutorial/example1-5.txt:144
# 7b4088f6d0b143239ff0a81a93c483a3
msgid ":ref:`Back to Example 1.4 <example1-4>` | :ref:`Proceed to Example 1.6 <example1-6>`"
msgstr ""

#: ../../en/tutorial/example1-5-map.txt:4
# 111fa66e96044bcd83b0d3a4521fc287
msgid "Example1-5.map"
msgstr ""

#: ../../en/tutorial/example1-6.txt:5
# db582079b4ac4b57957c9316a5de42c4
msgid "Example 1.6"
msgstr ""

#: ../../en/tutorial/example1-6.txt:7
# 1e53b170e69f4061873de03a9bbb4887
msgid "Defining Projections and Extents"
msgstr ""

#: ../../en/tutorial/example1-6.txt:11
# d493dcbd4e194bcfa531f58f6d9dc07f
msgid "Whoa! What happened here?"
msgstr ""

#: ../../en/tutorial/example1-6.txt:13
# 3575c3ca456345c8b9f71f643e62d139
msgid "You've just experienced on-the-fly reprojection. When a PROJECTION object is defined in the mapfile, MapServer passes the layer and projection info to the Proj.4 library which does the reprojection.  For more information about the Proj.4 library, please visit `<http://proj.maptools.org/>`_."
msgstr ""

#: ../../en/tutorial/example1-6.txt:18
# f7cde933a48c4b0d9e597afc74ddb6d3
msgid "This example attempts to shed some light on the projection support in MapServer."
msgstr ""

#: ../../en/tutorial/example1-6.txt:20
# 8a6b3aa142cf4e158f15569be9924aef
msgid "This is what the mapfile looks like: :ref:`Example1-6.map <example1-6-map>`"
msgstr ""

#: ../../en/tutorial/example1-6.txt:22
# 794ec155659443599ec03d7c8c2250aa
msgid "The first thing you might have noticed with our mapfile is the original EXTENT has been commented out and the new EXTENT values don't look anything like latitude and longitude values. Also, we have added a PROJECTION object near the top and within each of our layers."
msgstr ""

#: ../../en/tutorial/example1-6.txt:27
# 70d274f28bc544e39df31ad2a8acbaed
msgid "Let's have a look at the new object and parameter:"
msgstr ""

#: ../../en/tutorial/example1-6.txt:33
# 1f5af7cba3e747cd80e46a9b9e025580
msgid "The extent we provide to MapServer needs to be in the same units as the output projection.  Since Lambert Azimuthal Equal-Area's units are in meters, we have to give the new extent in meters.  We can calculate the new extent using ArcView or some other GIS package, or you can use Proj.4's cs2cs utility.  The command below is what can be used to reproject the original extent values:"
msgstr ""

#: ../../en/tutorial/example1-6.txt:43
# eb2a3207c72a4fc4aab0f8d16a6c4bc9
msgid "After typing the command, enter the southwestern coordinate pair (the lower left coordinates), separated by a space:"
msgstr ""

#: ../../en/tutorial/example1-6.txt:50
# 1c05567d41fc4ef192b4afd12c36ab5d
msgid "to which the \"cs2cs\" utility gives the values:"
msgstr ""

#: ../../en/tutorial/example1-6.txt:56
# d65c5a45d20c46df9f090b12e6fa8527
msgid "I then type the northeastern coordinate pair (upper right corner coordinates), again separated by space:"
msgstr ""

#: ../../en/tutorial/example1-6.txt:63
# bb4ea3678f3d412cbefc6eaca49619e0
msgid "and the following values are returned:"
msgstr ""

#: ../../en/tutorial/example1-6.txt:69
# e2301a4e53d243ec97cb3258b934ea54
msgid "You will notice that \"cs2cs\" returns a set of three values.  You can ignore the third value, 0.000, as it means to represent altitute (which we're not using). Anyway, we can now present the EXTENT as:"
msgstr ""

#: ../../en/tutorial/example1-6.txt:77
# 078565249af34a72b96c0405a6dcfa81
msgid "But it doesn't match up the extent above, you say.  Well, that's what usually happens when you reproject--the map doesn't necessarily get centered as you'd expect.  You can fudge around it, taking a few thousand meters off to the left and adding a few to the right.  Or, you can use a graphical GIS package to give you the extent. `Here are the instructions <http://biometry.gis.umn.edu/tutorial/arcview_extent.html>`_ for getting EXTENT using ArcView."
msgstr ""

#: ../../en/tutorial/example1-6.txt:85
# 8af621df51694f23aa76108763bae0fe
msgid "MapServer can take projection definitions in two ways. The first is shown in the mapfile's output PROJECTION object (the first PROJECTION block). This is the traditional way of passing parameters to the Proj.4 library. The other way is to use the EPSG codes. These codes are standard projection codes (or spatial reference identifiers) as defined by the European Petroleum Survey Group (EPSG). In the case of our Lambert Azimuthal Equal-Area projection, it has a code of \"2163\". If you comment out the four lines after PROJECTION and uncomment the line \"init=epsg:2163\", this will provide the same information to Proj.4. If you want to learn more about EPSG codes, have a look at \"/usr/local/share/proj/epsg\" or \"C:/proj/nad/epsg\" (\"/ms4w/proj/nad\" in MS4W)."
msgstr ""

#: ../../en/tutorial/example1-6.txt:96
# 3aa2ccc6712d402482aad94fccc0c905
msgid "Also, check out the EPSG web site at `<http://www.epsg.org>`_."
msgstr ""

#: ../../en/tutorial/example1-6.txt:98
# adf06c6ed3ca486080a4653a58d03ce9
msgid "If you need to learn more about projections, please look through some of the links below: `<http://www.colorado.edu/geography/gcraft/notes/mapproj/mapproj_f.html>`_"
msgstr ""

#: ../../en/tutorial/example1-6.txt:101
# bd0e4e9a8d294f69b9621e8a10033e98
msgid "`<http://www.geography.hunter.cuny.edu/mp/>`_"
msgstr ""

#: ../../en/tutorial/example1-6.txt:103
# 17bfead132804a6790d29a910457334d
msgid "`<http://www.nationalatlas.gov/articles/mapping/a_projections.html>`_"
msgstr ""

#: ../../en/tutorial/example1-6.txt:105
# 26337218381a4c03a6e03f3eabf9f6c3
msgid "`<http://en.wikipedia.org/wiki/Map_projection>`_"
msgstr ""

#: ../../en/tutorial/example1-6.txt:107
# feee0beddfd745c893ed3556c8222417
msgid "`<http://erg.usgs.gov/isb/pubs/MapProjections/projections.html>`_"
msgstr ""

#: ../../en/tutorial/example1-6.txt:109
# 36f5baa365574a3f95b77bf09b7aba8d
msgid "`<http://spatialreference.org/>`_"
msgstr ""

#: ../../en/tutorial/example1-6.txt:111
# 220ddaa44f7645919e2b76050501d86d
msgid "You can find more by searching the web for \"map projection\"."
msgstr ""

#: ../../en/tutorial/example1-6.txt:115
# d0354f4906114076b585eb8549dbf1e4
msgid ":ref:`Back to Example 1.5 <example1-5>` | :ref:`Proceed to Example 1.7 <example1-7>`"
msgstr ""

#: ../../en/tutorial/example1-6-map.txt:4
# 7dacd5fd61cf419c843eccd84c6ef58a
msgid "Example1-6.map"
msgstr ""

#: ../../en/tutorial/example1-7.txt:5
# f0f8cadd308c4593a567a7f5dde7c77e
msgid "Example 1.7"
msgstr ""

#: ../../en/tutorial/example1-7.txt:7
# d0e4884aa91547418fb73141492acf1c
msgid "Adding OGC WMS Layers"
msgstr ""

#: ../../en/tutorial/example1-7.txt:11
# fc38d12e1801433a8af23b8cb64687f2
msgid "Another exciting feature of MapServer is its ability to use layers from other map servers. In this case, a MapServer application becomes a WMS (or WFS) client. MapServer can also share (or serve up) the layers in the mapfile to other map servers. This makes an application a WMS (or WFS) server. What is WMS or WFS? These are \"web-based interoperability service\" specifications published by the Open Geospatial Consortium (OGC). WMS stands for Web Map Service and WFS for Web Feature Service. The difference between these two specifications, in simple terms, is that WMS uses web raster formats (PNG, GIF, JPEG) to share layers while WFS uses GML, the Geography Markup Language. A third OGC interoperability specification is the Web Coverage Services specification or WCS--MapServer supports this at the server level only. To find more information about WMS, WFS, and WCS go the the `OGC's web site <http://www.opengeospatial.org>`_ and look for the `OGC Implementation Specifications <http://www.opengeospatial.org/specs/?page=specs>`_ or `OGC Abstract Specifications <http://www.opengeospatial.org/specs/?page=abstract>`_. The MapServer web site also has :ref:`documentation <documentation>` and `WIKI pages <https://github.com/mapserver/mapserver/wiki>`_ for these specifications."
msgstr ""

#: ../../en/tutorial/example1-7.txt:29
# 07a7eda4734b4875a53196a477ba0ec0
msgid "This example shows you how to add a WMS layer in your mapfile."
msgstr ""

#: ../../en/tutorial/example1-7.txt:32
#: ../../en/tutorial/example1-8.txt:16
# 7e7fb54a8c714fdbb2a67c0a700e6fe3
# 414f7c03c24c4c32852c214a257275d2
msgid "The MapFile"
msgstr ""

#: ../../en/tutorial/example1-7.txt:34
# eeaf6057cbd94651aa4547f4aa90115b
msgid "This is what the mapfile looks like: :ref:`Example1-7.map <example1-7-map>`"
msgstr ""

#: ../../en/tutorial/example1-7.txt:37
# 97404dfa7bb74c1abe049084a4c4c6b6
msgid "LAYER Object and WMS Parameters"
msgstr ""

#: ../../en/tutorial/example1-7.txt:39
# aff119c5584b4690bb33d57b93883242
msgid "Let's have a look at the WMS layer:"
msgstr ""

#: ../../en/tutorial/example1-7.txt:42
# b729c2598e5745b3a1cce3040563024b
msgid "Marks the start of the WMS LAYER object."
msgstr ""

#: ../../en/tutorial/example1-7.txt:45
# 207c0c5d57e74313b05736cb24245dd0
msgid "The LAYER identifier."
msgstr ""

#: ../../en/tutorial/example1-7.txt:48
# b5e906fa8ff74fd3b59ca5fad77b3922
msgid "Since this the WMS layer is an image, we use RASTER as LAYER TYPE."
msgstr ""

#: ../../en/tutorial/example1-7.txt:51
# 58daf441e1aa43c5bcdc8f88d39a46fa
msgid "Ignore the black background color"
msgstr ""

#: ../../en/tutorial/example1-7.txt:54
# 37e33ba221934ce8823c2e49cadabf5d
msgid "Turn this layer off by default."
msgstr ""

#: ../../en/tutorial/example1-7.txt:57
# f2cb3d6ee3f34f4ab67d5fc7c4b1911a
msgid "The type of LAYER connection to use. The default is LOCAL--if we have to be explicit, we would add CONNECTIONTYPE LOCAL to all othe vector and raster layers in our mapfile. Instead we only define connection types that are external. WMS is an external data layer, coming from another map server."
msgstr ""

#: ../../en/tutorial/example1-7.txt:64
# f0ac0996dced4971b248ffada24f9845
msgid "The connection string that allows us to &quot;get&quot; the data from another server. In the case of WMS connections, this is a URL. If we were using a PostGIS database, it would be an SQL statement. Please note that the string has to be in a single line in your mapfile."
msgstr ""

#: ../../en/tutorial/example1-7.txt:71
# 0372c595024045fc88977cf219575fb7
msgid "marks the beginning of the METADATA object for our WMS layer. MapServer uses the parameters defined within this object along with the CONNECTION parameter above to form a valid WMS request to the WMS server."
msgstr ""

#: ../../en/tutorial/example1-7.txt:77
# 22345a83f10646d8b4841344442eb644
msgid "The WMS projection.  Sometimes the WMS server supports more than one projection.  If this is the case you might want to request the map in your output projection (epsg:2163).  Unfortunately, the JPL server doesn't support this projection."
msgstr ""

#: ../../en/tutorial/example1-7.txt:83
# fc15e293db784b85bbac8b5c3a3f2dbd
msgid "The WMS layer name. This is like adding the parameter \"layers=modis\"."
msgstr ""

#: ../../en/tutorial/example1-7.txt:86
# 0c0351c4b56e49cb8ee7318e723c7b25
msgid "The WMS version the server complies to. MapServer adheres to version 1.1.1."
msgstr ""

#: ../../en/tutorial/example1-7.txt:90
# b6aa80dc3b9043fd9972c7a486a54218
msgid "The image format we expect to be receiving from the WMS server.  You can try replacing the value with &quot;image/png&quot; or something else."
msgstr ""

#: ../../en/tutorial/example1-7.txt:94
# f0c6fcc8c5a04a94814e253fa6c3e6a3
msgid "marks the end of the METADATA object"
msgstr ""

#: ../../en/tutorial/example1-7.txt:96
# adf09e244ba9425b999ac4329f2d2c52
msgid "To know more about adding WMS layers to your applications, please visit the :ref:`MapServer WMS Client Howto <wms_client>`."
msgstr ""

#: ../../en/tutorial/example1-7.txt:100
# 8378b853ea7945c49058cafe67e8713f
msgid "WEB Object Parameters"
msgstr ""

#: ../../en/tutorial/example1-7.txt:102
# 39551ace5f7b46519d7c59a345086b4b
msgid "In addition to adding the WMS layer object, there's also a new object under MAP. This is the WEB object. Within the WEB object are two parameters:"
msgstr ""

#: ../../en/tutorial/example1-7.txt:105
# 0e22133e93434bc5bc50c91e45672778
msgid "The absolute local path to a web accessible temporary directory. The user running the web server processes should be able to write to this directory. Make sure that the path includes a slash (/) at the end. (Your IMAGEPATH might look something like this: \"/home/apache/htdocs/tmp/\" or \"C:/Inetpub/wwwroot/tmp/\".)"
msgstr ""

#: ../../en/tutorial/example1-7.txt:113
# 9436bd3d8f824551b0c4e1a8da941116
msgid "This is how IMAGEPATH will appear relative to the web server's root directory. If we have to type the full URL for this, it will be \"http://terrasip.gis.umn.edu/tmp/\". Make sure that the path includes a slash (/) at the end."
msgstr ""

#: ../../en/tutorial/example1-7.txt:118
# 0fa32326cf5e4344811043a228930a0c
msgid "Finally, within the MAP object, I added a new parameter: NAME. This is the identifier for the MAP object. MapServer uses this as prefix to all images it creates and dumps to the &quot;tmp&quot; directory. It's not needed at this point but it also doesn't hurt to have it."
msgstr ""

#: ../../en/tutorial/example1-7.txt:123
# d866c635a1a0447caa22d628bd0be165
msgid "If you would like to share your data layers to other map servers, you will need to add METADATA objects within your MAP object and within each of the LAYER objects you would like to share. All the WMS layers that you added from another server will automatically be cascaded and will also become available to others. To know more about how to make your MapServer application become a WMS server, please read the :ref:`MapServer WMS Server HowTo <wms_server>`. Documentation also exists for configuring MapServer applications to support the WFS standard, both as a :ref:`server <wfs_server>` and as a :ref:`client <wfs_client>`."
msgstr ""

#: ../../en/tutorial/example1-7.txt:136
# 6d55cafe9bd34f6c8593d566c250bd59
msgid ":ref:`Back to Example 1.6 <example1-6>` | :ref:`Proceed to Example 1.8 <example1-8>`"
msgstr ""

#: ../../en/tutorial/example1-7-map.txt:4
# 3c0e18f6219944c78c7b8668f6e69d3c
msgid "Example1-7.map"
msgstr ""

#: ../../en/tutorial/example1-8.txt:5
# 02fb463ca1994d90b6f8c9d7a6610eb1
msgid "Example 1.8"
msgstr ""

#: ../../en/tutorial/example1-8.txt:7
# 136e0a26fb4d4621ab4c7d8dbf2b3c86
msgid "Changing the Map's Output Format"
msgstr ""

#: ../../en/tutorial/example1-8.txt:11
# 59d387e4938447028a2f77417efef52a
msgid "Depending on the format you choose, the image may not display on your browser. If the link fails to display on your browser, right click on the graphic above and save the link as whatever format you specified on your mapfile."
msgstr ""

#: ../../en/tutorial/example1-8.txt:18
# f971672344b34edb9c66569c2ccfe119
msgid "Here's the mapfile: :ref:`Example1-8.map <example1-8-map>`"
msgstr ""

#: ../../en/tutorial/example1-8.txt:21
# 13e5ad4a3fdb4761b86c756d91e95fe5
msgid "OUTPUTFORMAT Object"
msgstr ""

#: ../../en/tutorial/example1-8.txt:22
# 028aeec571ed4290b8077e7013349afa
msgid "Our mapfile now contains a new object, OUTPUTFORMAT. This object is defined within the MAP object and is used in conjunction with the IMAGETYPE keyword. Depending on the libraries you compiled with MapServer, you can have several output format choices--the GD library provides PNG (8- and 24-bit), GIF, JPEG, and WBMP; the GDAL library, a source for many of MapServer's input formats, can also provide output to PNG, JPEG, TIFF/GeoTIFF, and other raster formats; the PDFLib library provides PDF output; and the MING library provides Flash output. Have a look at the OUTPUTFORMAT object and experiment by changing the IMAGETYPE keyword on you mapfile. The NAME of your OUTPUT format should be used as your IMAGETYPE value ex: IMAGETYPE png or IMAGETYPE png24)."
msgstr ""

#: ../../en/tutorial/example1-8.txt:33
# 7f1356cf812e46629e4a65d769183b25
msgid "Please consult the :ref:`OUTPUTFORMAT object reference <outputformat>`."
msgstr ""

#: ../../en/tutorial/example1-8.txt:37
# 8448872bdd7a4edbb70b311c6fe82617
msgid ":ref:`Back to Example 1.7 <example1-7>` | `Proceed to Example 1.9 <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example1-9.map&layer=states&layer=modis>`_"
msgstr ""

#: ../../en/tutorial/example1-8-map.txt:4
# 3b97650d52034d5e8a6d41f5d5aad3ff
msgid "Example1-8.map"
msgstr ""

#: ../../en/tutorial/index.txt:5
# 1381e98b02494926b1f8d78dec97ca3a
msgid "MapServer Tutorial"
msgstr ""

#: ../../en/tutorial/index.txt:7
# 5fdbe81fade84ae8a62a64be7f092727
msgid "Pericles S. Nacionales"
msgstr ""

#: ../../en/tutorial/index.txt:8
# cf20617c6e0e4f1097caa7f0f0ce78c3
msgid "pnaciona at gmail.com"
msgstr ""

#: ../../en/tutorial/index.txt:9
# 0ab81b01863b458b97f7d296aad91a53
msgid "Jeff McKenna"
msgstr ""

#: ../../en/tutorial/index.txt:10
# f3521de05b77470db72a9cccdc0b9815
msgid "jmckenna at gatewaygeomatics.com"
msgstr ""

#: ../../en/tutorial/index.txt:11
# 41effddc1b564411aad790c486a064c3
msgid "2010-04-07"
msgstr ""

#: ../../en/tutorial/index.txt:13
# 5712563e159041d7ae339553481db222
msgid "This tutorial was designed to give new users a quick (relatively speaking) introduction to the concepts behind MapServer. It is arranged into four sections with each section having one or more examples and increasing in complexity. Users can jump to any section at any time although it is recommended that absolute beginners work on the first three sections sequentially."
msgstr ""

#: ../../en/tutorial/index.txt:19
# 7ef399516bec492591d214db3d3f04c7
msgid "Section one focuses on basic MapServer configuration concepts such as layer and class ordering, using vector and raster data, projections and labeling. Section two provides examples on how to use HTML templates to create a simple interface for an interactive web mapping application. Section three introduces the use of HTML templates to provide a \"query\" interface. Finally, section four introduces some advanced user interface concepts."
msgstr ""

#: ../../en/tutorial/index.txt:36
# ee0ed130f6414e9b9b7212a232467084
msgid ":ref:`Begin tutorial <background>`"
msgstr ""

#: ../../en/tutorial/section1.txt:4
# f02d082268e242df8bc0e53e90f0f78e
msgid "Section 1: Static Maps and the MapFile"
msgstr ""

#: ../../en/tutorial/section1.txt:6
# cdc232f8f01f46119ab82aed82853ba4
msgid "Take a shapefile. Any shapefile. We can use MapServer to display that shapefile on a web browser. Look..."
msgstr ""

#: ../../en/tutorial/section1.txt:9
# 25eb8e0ffcb943f0b9734fa85fce73e8
msgid ":ref:`Example 1.1 - A map with a single layer <example1-1>`"
msgstr ""

#: ../../en/tutorial/section1.txt:11
# 57c3084c97a749eea71537d095af8679
msgid "We can display the same shapefile repeatedly. We can display the polygon attributes on one LAYER and and the line attributes on another..."
msgstr ""

#: ../../en/tutorial/section1.txt:15
# d3f9c0bdda4c4df692fdf66bf218d800
msgid ":ref:`Example 1.2 - A map with two layers <example1-2>`"
msgstr ""

#: ../../en/tutorial/section1.txt:17
# 46fdf1aefa5642c4b320c797a5a7bc89
msgid "And we can select which parts of the shapefile to display. We do this using the CLASS object..."
msgstr ""

#: ../../en/tutorial/section1.txt:20
# 857c05547feb4eeab279f0019dcbbcbf
msgid ":ref:`Example 1.3 - Using classes to make a \"useful\" map <example1-3>`"
msgstr ""

#: ../../en/tutorial/section1.txt:22
# 0c9eb9ee10924cdeba39c1408c36656d
msgid "We can also label our maps..."
msgstr ""

#: ../../en/tutorial/section1.txt:24
# 8a4807dfc9784f7dae876d6675c27685
msgid ":ref:`Example 1.4 - Labeling layers and label layers <example1-4>`"
msgstr ""

#: ../../en/tutorial/section1.txt:26
# 77a12bda817c480ca35eb29eb6647c49
msgid "Or add raster data such as satellite images, aerial photographs, or shaded reliefs..."
msgstr ""

#: ../../en/tutorial/section1.txt:29
# 5a3706f80af2417daf83985db0a324c4
msgid ":ref:`Example 1.5 - Adding a raster layer <example1-5>`"
msgstr ""

#: ../../en/tutorial/section1.txt:31
# 29a14e906f3b4811b1034445e199e230
msgid "We can reproject our data from just about any projection to just about any... Yeah, check it out!"
msgstr ""

#: ../../en/tutorial/section1.txt:34
# 9c605fb932054918b368a9f07e6da649
msgid ":ref:`Example 1.6 - Projection/Reprojection <example1-6`"
msgstr ""

#: ../../en/tutorial/section1.txt:36
# 20f11c83be7d40f7af8e688a261f92b6
msgid "And we can use layers from other map servers on the internet (as long as they are WMS servers)..."
msgstr ""

#: ../../en/tutorial/section1.txt:39
# 8ecb2f220c8a4319ada31c505cd5e3dd
msgid ":ref:`Example 1.7 - Adding a WMS layer <example1-7>`"
msgstr ""

#: ../../en/tutorial/section1.txt:41
# 489f5fc8973542678c3fd973e3b6a274
msgid "MapServer can output to various formats such as PDF and GeoTIFF."
msgstr ""

#: ../../en/tutorial/section1.txt:43
# 65468a84ed494a4fa0e87fb8f16273a1
msgid ":ref:`Example 1.8 - A different output format <example1-8>`"
msgstr ""

#: ../../en/tutorial/section1.txt:45
# d17c3479f1ab45f3935464eca012be89
msgid "MapServer not only generates static maps, it can also create interactive maps..."
msgstr ""

#: ../../en/tutorial/section1.txt:48
# e952a2c9e0cb457dbadc95f50e74c883
msgid "`Example 1.9 - The difference between map and browse mode <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example1-9.map&layer=states&layer=modis>`_"
msgstr ""

#: ../../en/tutorial/section1.txt:52
# 73f649aa4d124710b491f0797bcbaafb
msgid ":ref:`Back to Tutorial home <tutorial>` | :ref:`Proceed to Section 2 <section2>`"
msgstr ""

#: ../../en/tutorial/section2.txt:4
# bc409789bc9749e7875cef7721ac1d1b
msgid "Section 2: CGI variables and the User Interface"
msgstr ""

#: ../../en/tutorial/section2.txt:6
# 096d28d9362c4aa39952d007b98e64ae
msgid "So far we have only looked at the mapfile when creating maps. In creating web mapping applications, it is usually our intention to make maps that can be changed by the user (of the application) interactively. That is, a user should be able to change the content of (or the information in) the map. To accomplish this interactivity, we use the MapServer HTML templates."
msgstr ""

#: ../../en/tutorial/section2.txt:13
# cae9556f6d904685b4e14598f1a299d3
msgid "HTML Templates"
msgstr ""

#: ../../en/tutorial/section2.txt:15
# 492338e68d9f41e6b6b9aabc3b0a7214
msgid "A MapServer HTML template is essentially an HTML file with a few MapServer specific tags. These tags are the MapServer CGI variables and are enclosed in square brackets \"[]\". When the MapServer CGI program processes an application, it first parses the query string and the mapfile, and produces the necessary output. Some of this output will need to be written to the HTML template file which you would have to also specify in the mapfile using the web template keyword (or in a separate HTML initialization file). The CGI program will replace all the variables in the HTML template with the proper value before sending it back to the web browser. If you are to directly view an HTML template on a web browser, there won't be any maps rendered and you will instead get blank images and other junk."
msgstr ""

#: ../../en/tutorial/section2.txt:27
# 7787d08812ae4001be34f43a0e0966ea
msgid "Variables"
msgstr ""

#: ../../en/tutorial/section2.txt:29
# d3afbe8fd3d94fc1bec8fdad982d3b2c
msgid "MapServer provides several variables for web mapping: the \"img\" variable which you've seen in Example 1.9 is but one example. There area few core CGI variables originally designed as part of the mapping interface but practically all the mapfile parameters can be defined as variables. The definitive reference to the CGI variables can be found at :ref:`here <cgi>`."
msgstr ""

#: ../../en/tutorial/section2.txt:35
# be5c0a87a2594c44b5ede864c833d8e3
msgid "We can also define our own variables, which MapServer will pass along to our application. For example, we can create a variable called \"root\" to represent the root directory of this tutorial, the value for \"root\" will then be \"/tutorial\". When the MapServer CGI program processes our HTML template, it will replace every instance of he \"[root]\" tag with \"/tutorial\". You will see this in action for each of the following examples."
msgstr ""

#: ../../en/tutorial/section2.txt:42
# 1f79e362e34a424485f2245d77b49bfc
msgid "Examples"
msgstr ""

#: ../../en/tutorial/section2.txt:44
# 4e7c17ccd0724dceaf94cb63381c5ffa
msgid "So, let's build an interactive interface for our application..."
msgstr ""

#: ../../en/tutorial/section2.txt:46
# c8f14e2510fa42efb5ebb33f2e35e874
msgid "Users of a web mapping application should be able to pan and zoom on the map: `Example 2.1 - Pan and Zoom Controls <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example2.map&layer=states&zoom=0&mode=browse&root=/tutorial&program=/cgi-bin/mapserv&map_web=template+example2-1.html>`_"
msgstr ""

#: ../../en/tutorial/section2.txt:49
# c5add3a5ec2e4da7975b5b80618990d4
msgid "They also should be able to turn on and off layers on a map: `Example 2.2 - Layer Control <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example2.map&layer=states&zoom=0&mode=browse&root=/tutorial&program=/cgi-bin/mapserv&map_web=template+example2-2.html>`_"
msgstr ""

#: ../../en/tutorial/section2.txt:52
# c643e0c4307f4fe29fec8ed03e2d265e
msgid "A map should always include a scalebar. `Example 2.3 - Adding a Scalebar <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example2.map&layer=states&zoom=0&mode=browse&root=/tutorial&program=/cgi-bin/mapserv&map_web=template+example2-3.html>`_"
msgstr ""

#: ../../en/tutorial/section2.txt:55
# 6c0ae4e57f9b489986426e55b371fccb
msgid "If users are to navigate through the map, a reference map should be provided: `Example 2.4 - Adding a Reference Map <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example2.map&layer=states&zoom=0&mode=browse&root=/tutorial&program=/cgi-bin/mapserv&map_web=template+example2-4.html>`_"
msgstr ""

#: ../../en/tutorial/section2.txt:58
# 7fb648620fba4b8f9e8d59c3143d6c0a
msgid "The map should include a legend. `Example 2.5- Adding a Legend <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example2.map&layer=states&zoom=0&mode=browse&root=/tutorial&program=/cgi-bin/mapserv&map_web=template+example2-5.html>`_"
msgstr ""

#: ../../en/tutorial/section2.txt:63
# a643adaa00f4452796c01279b16a8c95
msgid ":ref:`Back to Section 1 index <section1>` | :ref:`Proceed to Section 3 <section3>`"
msgstr ""

#: ../../en/tutorial/section3.txt:4
# 7162d09e27e9433e89dd4873dd7fcad5
msgid "Section 3: Query and more HTML Templates"
msgstr ""

#: ../../en/tutorial/section3.txt:6
# 9555aba85e0e44b1a8074970c44331d6
msgid "To learn more about query and HTML templates with MapServer, see examples 3.1 to 3.4 in the `Tutorial Viewer <http://demo.mapserver.org/tutorial/section3.html>`_."
msgstr ""

#: ../../en/tutorial/section3.txt:11
# a81d85602bf0419285dc9ab711f53a36
msgid ":ref:`Back to Section 2 index <section2>` | :ref:`Proceed to Section 4 <section4>`"
msgstr ""

#: ../../en/tutorial/section4.txt:4
# 96bbcd37019a4e1eb218be951e87a53e
msgid "Section 4: Advanced User Interfaces"
msgstr ""

#: ../../en/tutorial/section4.txt:6
# 48bdcc895c0349f08059a9fb20f8434c
msgid "To learn more about advanced navigation such as pan and rubber-band zoom with Javascript and MapServer CGI, see examples 4.1 to 4.4 in the `Tutorial Viewer <http://demo.mapserver.org/tutorial/section4.html>`_."
msgstr ""

#: ../../en/tutorial/section4.txt:12
# 9063472a949646caa94e4a705fd37c01
msgid ":ref:`Back to Section 3 index <section3>` | :ref:`Tutorial home <tutorial>`"
msgstr ""

