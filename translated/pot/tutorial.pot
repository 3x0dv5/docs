# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, Regents of the University of Minnesota
# This file is distributed under the same license as the MapServer package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MapServer 6.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-12-06 19:08+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../en/tutorial/background.txt:6
# cb84b72ee3c14a069e9ab3a46571dcba
msgid "Tutorial background"
msgstr ""

#: ../../../en/tutorial/background.txt:9
# 185795d01d2f4284881183d34e4f8575
msgid "Tutorial Timeframe"
msgstr ""

#: ../../../en/tutorial/background.txt:11
# e46e32efc0bf469b843bb03e68495153
msgid "While some users can go through this tutorial in one day, those who work on each example in detail can probably expect to finish in one week."
msgstr ""

#: ../../../en/tutorial/background.txt:15
# 64327c0944c6491f978b514c7f3f2a1e
msgid "Tutorial Data"
msgstr ""

#: ../../../en/tutorial/background.txt:17
# 021736a7244848fc9e943d939df0d025
msgid "The dataset used in this tutorial was taken from the U.S. Department of the Interior's National Atlas of the United States. You can visit their web site at http://www.nationalatlas.gov. The dataset was clipped to the upper great lakes region (Minnesota, Michigan, and Wisconsin) to reduce storage size. Additional raster images were added courtesy of the TerraSIP project at the University of Minnesota. When using this tutorial, you are encouraged to use your own dataset."
msgstr ""

#: ../../../en/tutorial/background.txt:25
# 134b327318584e4c80ac04a0fc650044
msgid "Like MapServer itself, this tutorial is open and customizable to anyone. This was done in the hope that someone (or some folks) will help design and develop it further."
msgstr ""

#: ../../../en/tutorial/background.txt:29
# 80d046d887bd4b8084a4916e76826fbd
msgid "Download the data (and all html files) for this tutorial at http://download.osgeo.org/mapserver/docs/mapserver-tutorial.zip."
msgstr ""

#: ../../../en/tutorial/background.txt:32
# 9f6fcad357d24a79931b7724828cb5eb
msgid "Before Using the Tutorial"
msgstr ""

#: ../../../en/tutorial/background.txt:34
# 9f4b6a259b1d4009beaab51c48d58659
msgid "There are some prerequisites to using this tutorial:"
msgstr ""

#: ../../../en/tutorial/background.txt:36
# 6735e12094f1472ea0eac6df5eb5631c
msgid "Users will need to have a web server installed and running on their computer. This web server has to have support for common gateway interface (CGI) programs."
msgstr ""

#: ../../../en/tutorial/background.txt:39
# 01287614519c46dea8b34a998f1e6b37
msgid "Users should have a basic understanding of web servers and internet security. A poorly configured web server can easily be attacked by malicious people. At the very least your software installation will be corrupted and you'll lose hours of productivity, at worst your computer can be used to attack other computers on the internet."
msgstr ""

#: ../../../en/tutorial/background.txt:45
# 417bdd307a5e44e6856d7a836b957141
msgid "It is recommended that users of this tutorial read the :ref:`Introduction to MapServer <introduction>` before proceeding with this tutorial."
msgstr ""

#: ../../../en/tutorial/background.txt:49
# 75b8e61e23954d0eb087cc23ed1f1d35
msgid "To use this tutorial, users will need to have a MapServer CGI program (mapserv or mapserv.exe) installed in their systems. MapServer source code is available for download :ref:`here <download>`. Documentation exists on how to compile and install MapServer:"
msgstr ""

#: ../../../en/tutorial/background.txt:54
# 9558dd84a8554652a79aa92055c89a10
msgid "for UNIX users, please read the :ref:`MapServer UNIX Compilation and Installation HOWTO <unix>`."
msgstr ""

#: ../../../en/tutorial/background.txt:55
# d04662275618412c895e11d054bf8d8d
msgid "Windows users should read the :ref:`MapServer Win32 Compilation and Installation HOWTO <win32>`"
msgstr ""

#: ../../../en/tutorial/background.txt:57
# 1f52c62256694ffa8a15a61c61e10631
msgid "In addition, precompiled binaries exist for a number of platform (see the :ref:`download page <download>`)."
msgstr ""

#: ../../../en/tutorial/background.txt:61
# d0522fbde959450387826e614e15b53e
msgid "Windows, UNIX/Linux Issues"
msgstr ""

#: ../../../en/tutorial/background.txt:64
# eac29e9e382a4d3eb8351888330254ab
msgid "Paths"
msgstr ""

#: ../../../en/tutorial/background.txt:66
# 39b033bf991c4d84a807fcffc516da6a
msgid "This tutorial was created on Linux/UNIX but should work with minimal changes on Windows platform. The main differences are the paths in the map files. Windows users need to specify the drive letter of the hard disk where their tutorial files reside. Here's an example:"
msgstr ""

#: ../../../en/tutorial/background.txt:71
# ad3a836b172f456cb96114f6cc1659f8
msgid "A UNIX map file might include a parameter like this:"
msgstr ""

#: ../../../en/tutorial/background.txt:77
# ea5a981665f94f2ebff90f3f00861ec2
msgid "In Windows, the same parameters might look like this:"
msgstr ""

#: ../../../en/tutorial/background.txt:83
# be2cede2f85c46b1a89bd89a7c706708
msgid "or:"
msgstr ""

#: ../../../en/tutorial/background.txt:89
# f77e5dbf22fc4437a62eae8fbe2f3eae
msgid "Notice that either slash or backslash works in Windows. The usual backslash may work well for you if you want to make a distinction between virtual (as in URLs or web addresses) and local paths in your map file. However, if you plan to move your application to UNIX at some point, you'll have the tedious task of switching all backslashes to slashes."
msgstr ""

#: ../../../en/tutorial/background.txt:96
# 0a7a0a8c2d034d2da42e23924b6cd46c
msgid "While we're on the subject of paths, keep in mind that paths in mapfiles are typically relative to the system's root directory: the slash (\"/\") in UNIX or some drive letter (\"C:\") in Windows. This is true except when specifically asked to enter a URL or when referencing a URL. When working with HTML template files, paths are relative to the web server's root directory.  i.e., \"/tutorial/\" is relative to \"http://demo.mapserver.org/\". Please read http://www.alistapart.com/articles/slashforward/ for a few insights on URLs."
msgstr ""

#: ../../../en/tutorial/background.txt:107
# 964e02c5af6348a69841bb7af2739791
msgid "Executable"
msgstr ""

#: ../../../en/tutorial/background.txt:109
# ed3aee38500c42daadc3abefbe2e9fa0
msgid "Another issue is that UNIX executable files don't require a .EXE or .COM extensions, but they do in Windows. If you are using Windows, append .exe to all instances of \"/cgi-bin/mapserv\" or \"/cgi-bin/mapserv50\" to make it \"/cgi-bin/mapserv.exe\" or \"/cgi-bin/mapserv50.exe\"."
msgstr ""

#: ../../../en/tutorial/background.txt:116
# 6c322aa21bd84e87971d073afcdea4af
msgid "Other Resources"
msgstr ""

#: ../../../en/tutorial/background.txt:118
# 7f88cbed58474b678f3ae7539fc413d7
msgid "Other documentation exist to give you better understanding of the many customizations MapServer offer. Please visit the MapServer documentation page at http://www.mapserver.org. There you will find several HOWTO documents, from getting started to using MapScript, a scripting interface for MapServer."
msgstr ""

#: ../../../en/tutorial/background.txt:126
# 8f4f034400cc43698afe298d06e65864
msgid ":ref:`Back to Tutorial home <tutorial>` | :ref:`Proceed to Section 1 <tutorial_section1>`"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:7
# 58f43441118d4d0ea61d80a5f9db6722
msgid "Example 1.1"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:9
# c4bb50f99c9240fba613b50e462c8dca
msgid "Map With A Single Layer"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:13
# 7b36d655c41846f49609ae0d5148d11b
msgid "MapServer can create an image and dump it to a local directory or send it directly to the requesting web browser, as in this example. You can view it without the need for an html page, just enter this URL: `<http://localhost/cgi-bin/mapserv?map=/ms4w/apps/tutorial/htdocs/example1-1.map&layer=states&mode=map>`_ .  This URL will work if you are on the web server (if not, \"localhost\" must be replaced with your web server's name (e.g. \"demo.mapserver.org\") or IP address (e.g. \"140.211.15.84\")."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:21
# d1ec2f3ccecb43ea944f2f9af52362e8
msgid "This URL can be broken into three parts: the first part, http://localhost/cgi-bin/mapserv?, calls the MapServer CGI program. If you invoke it as is you will get this familiar message:"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:29
# a9d39bff3f42427aab3c75662be694b6
msgid "The next three parts make up the query string.  The query string contains the CGI parameters (variables and their values), with each parameter separated by an ampersand (\"&\"). So, looking at the query string:"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:34
# e2cbcc29c0b348babdfc085b00af29ee
msgid "The first parameter \"map\" has a value \"/ms4w/apps/tutorial/htdocs/example1-1.map\".  This tells the MapServer CGI program (**mapserv** or **mapserv.exe**) what mapfile to process/parse."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:39
# adce2109b2e04456932c0b7d80f5f680
msgid "The next parameter (*layer=states*) tells **mapserv** to \"turn on\" the states layer.  Recall that we named our layer object \"states\"."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:43
# cbc60581fdfa4c33a08f3fa46df25026
msgid "The last parameter (*mode=map*) tells **mapserv** what to do with the output from the mapfile. In this case it tells **mapserv** to dump the image directly to the web browser (the client), without first creating a temporary image on the server."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:48
# 72d20a8936d3407e93e7bbd6056e8fec
msgid "The MapServer *mode* CGI variable takes values other than *map*. For example if you use *mode=browse*, MapServer will dump the image to a temporary directory on the server. The browse mode will not work now but we'll come back to it again later."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:55
# e59f615477804d4f87422df62735c392
msgid "Mapfile Structure"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:57
# 1da23bba73984cadbec733b2d8c80bd8
msgid "This is what the mapfile looks like: :ref:`Example1-1.map <example1-1-map>`."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:59
# 6f0aa5d00cba460a9ce8c3fe19a40121
msgid "The :ref:`MAPFILE <mapfile>` is MapServer's basic configuration mechanism. It is made up of \"objects\" and each object can have keywords or other objects. It has a hierarchical structure such that some objects fall under other objects... on top of this hierarchy is the MAP object, all other objects belong to it. This example shows a very straightforward heirarchy of objects.  As you go through each example, the complexity of these hierarchical trees will increase."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:67
# 581fd7329f304992b08bcdc912c37346
msgid "A few quick notes about mapfiles: we define each object in the mapfile with the object name and we close it with \"END\" and we precede comments with a pound (#) sign."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:71
# f3c0e072625e40489372e5db549b658d
msgid "Let's break \"example1-1.map\" down by objects. Its structure looks like this:"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:82
# 9410a90bc34b4af89d49cb9b4208a5da
msgid "MAP Object"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:84
# 4b8dcd24a5ef462fb13096f65f301f98
msgid "Let's look at the keywords (parameters) within the MAP object:"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:88
# 8882c3673754423cb8c65431f65be7a0
msgid "**MAP**"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:87
# c2ed3650204641fb909420bc2f8040a1
msgid "Every mapfile must start with the :ref:`MAP <map>` object--the entire mapfile is the MAP object."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:99
#: ../../../en/tutorial/example1-5.txt:87
# 878729f90c9f47159bb9ecb5a93942bd
# 15f45afed8ce4044ba26838f11007121
msgid "**IMAGETYPE**"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:91
# 404007c533d74a1a8295a85116dc0426
msgid "The keyword IMAGETYPE is used to define which image format the MapServer CGI program should use for output. In this case we are using indexed color PNG (similar to GIF). This could be GIF, if we compiled the GD library with GIF support, WBMP, or JPEG. We can also specify other output options (PDF, SWF, GeoTIFF) provided that we compiled support for them and specify them with the OUTPUTFORMAT object. The OUTPUTFORMAT goes beyond the scope of this tutorial but you can find out more about by reading through documentations in the MapServer web site."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:139
# 90c3121b3b744575a9b0efdae037d4ee
msgid "**EXTENT**"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:102
# 812dbf544b5d4895a5a9b5561e7aaf46
msgid "This parameter specifies the output extent of our map--the bounding box of our initial map.  The EXTENT values are given in this format::"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:108
# 9bb25f7b95cd42a1b7aee0391ca89f6e
msgid "with spaces separating each value. This needs to be in the same units as the data or, if specifying a different output projection, in the same units as the output projection."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:112
# 7db0179673224328b3340a0052ffe5f8
msgid "In this example our data is in geographic projection so the units are in decimal degrees.  You can use the utility `ogrinfo <http://gdal.osgeo.org/ogr_utilities.html>`_, which is part of the GDAL/OGR library package, to get the extent of a particular Shapefile dataset (or other supported vector formats).  Here is the command I used to get the extent for this example::"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:121
# d22b89a750374dfca3c15a42b2e6855b
msgid "This returned the following output::"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:135
# 959728893cba4d4086a756082b242ac0
msgid "You can also use ArcView or an open source GIS packages--QGIS, Thuban, etc."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:138
# 2f1277d4ce2443718f5e97e5be09131a
msgid "Feel free to change the values of EXTENT to get a better understanding of how it changes your map."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:145
#: ../../../en/tutorial/example1-4.txt:90
# f381b14df806436bbf309493c148048d
# 2b4c92911288497b9bdb568b5460f8cf
msgid "**SIZE**"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:142
# d6a4710822bd49c69fc03cd5631ff131
msgid "This is the size of the image (the map) that MapServer will generate, in pixels. So our map is 400 pixels wide by 300 pixels high.  Again, change this to your heart's content and see how it affects your map."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:156
# 93e8c12bcc0b4ceaa7f89eaf5d329643
msgid "**SHAPEPATH**"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:148
# 716b4679a1be4659af62cc4983ef0616
msgid "This is the path to your data layers. You can provide absolute paths (i.e. \"/ms4w/apps/tutorial/data\" or \"C:/ms4w/apps/tutorial/data\") or paths relative to your mapfile's location (in this example, you'd use \"../data\"). This path doesn't have to be web accessible, and probably shouldn't be unless you want anyone to download your raw data. It has nothing directly to do with the web so don't even think of URLs here.  Just make sure that the user running the web server (usually \"nobody\" or \"apache\" in the \\*nix world) can READ the data in the SHAPEPATH."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:161
# 93b0243dc9df437da8d2d3c1cb149450
msgid "**IMAGECOLOR**"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:159
# 1f14527b0deb43e49b8f17394ad62701
msgid "This is the background color of your map. The values are RGB values so 255 Red, 255 Green, and 255 Blue which results in a white background.  Go ahead and play with this values."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:164
# 0740f6a5ebb74a9187902ac036357cc3
msgid "LAYER Object"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:166
# dbc626e00a9542d3850abe7445a7daf6
msgid "Now let's look at the LAYER object parameters:"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:172
# 7423e5259acc4850aafe053562cd1047
msgid "**LAYER**"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:169
# d1b6895a9ffe4494b21261baecc108f4
msgid "Marks the beginning of a :ref:`LAYER <layer>` within the MAP object.  You can specify as many layers as you like (in MapServer versions < 5, there was a limit that could be changed by editing the map.h header file and recompileing MapServer)."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:178
#: ../../../en/tutorial/example1-1.txt:218
# 213d8f01ac8341fbb00bb13096ba8aa8
# 37da0e50594e4532a94980d0fe360eed
msgid "**NAME**"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:175
# c06d936b8c034cf1963109a487cb9a72
msgid "This is the layer identifier.  MapServer uses this name to toggle the layer on and off.  It won't work in this example as we have the layer STATUS set to default.  We will get back to this in later examples."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:189
# 74159644f8fa409588b998e692ba3467
msgid "**DATA**"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:181
# abbeebbc7bd24823bbe1a2c0ebb88902
msgid "The name of the data (Shapefile dataset in this case). MapServer supports vector data formats other than ESRI's Shapefile format through the use of OGR library (part of the GDAL software package). Please visit the GDAL project web site at `<http://gdal.osgeo.org/>`_ and read `<http://gdal.osgeo.org/ogr/>`_ to learn more about the different vector formats MapServer supports.  In addition, Jeff McKenna and Tyler Mitchell have written a detailed :ref:`guide to using vector data for MapServer <vector>`."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:195
#: ../../../en/tutorial/example1-4.txt:82
# 7388c9d9f7b242b0b48ada5f00da8755
# 9f93e790cc7a4d1e884bb8cc0dde3344
msgid "**TYPE**"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:192
# 53fb5efb3bad4ecaa0dfb42358282885
msgid "What type of data is it? If it's a vector data, you can specify whether it is a POLYGON, LINE (you use LINE even if your data is technically a POLYLINE), or a POINT. You can also specify RASTER or ANNOTATION data.  Here we want to display POLYGON."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:200
# 9ecfb0df44204930b79b1bdd3f1ac45f
msgid "**STATUS**"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:198
# 2284f11f8bd6431d8249027553f66cd6
msgid "Layers are turned on or off based on their STATUS. DEFAULT is always on.  ON or OFF works when the LAYER name is passed as part of the query string."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:203
# 5b92ebadcaeb453484ad9eed785f4a7f
msgid "CLASS Object"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:205
# 690486dd1e3d4cdc8da55b4a8687b5ca
msgid "Let's look at the CLASS object parameters:"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:211
# db59879eba224dd48777e15a86cfbbee
msgid "**CLASS**"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:208
# 45ac301383ec4a3bb3279f5a018a2f8f
msgid "Marks the beginning of a :ref:`CLASS <class>` object within the LAYER object. You can specify as many classes within a layer (in MapServer  versions < 5, there was a limit that could be changed by editing the map.h header file and recompiling MapServer)."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:214
# 2f69f71e288942c491b2662c00d9e42b
msgid "The descriptive identifier for this CLASS. LAYER objects can have multiple classes, just like MAP objects can have multiple layers. CLASS names are used by MapServer as labels for the legend so make sure to use an appropriate descriptive name when naming classes. We will talk about legends later in this tutorial."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:221
# 8b6bce6121b64cec83f3f4a372a050a4
msgid "STYLE Object"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:223
# c256978b078349be8bd7f762094874f5
msgid "And finally, let's look at the STYLE object parameters:"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:228
# b4134e0220cf45ffb36783f308864561
msgid "**STYLE**"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:226
# f8218b394a5c4c15a169e7c86268b72f
msgid "Marks the beginning of the :ref:`STYLE <style>` object.  You can define multiple styles within a class.  This is useful when you want to overlay a style over another."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:232
#: ../../../en/tutorial/example1-4.txt:59
# 41d238cd07904bb0b60d1e2d62e282d6
# 716702724adc47a194473636a54c89f3
msgid "**COLOR**"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:231
# 85ed60f76db846db95c431a6abc39ee3
msgid "This is the fill color of the polygon. In case the TYPE is LINE, this is the line color. The values are in RGB format."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:238
# 10fb227cacf44e519cdd4e41f0e6acf4
msgid "**OUTLINECOLOR**"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:235
# 3ac985bc8c2742bab2d3c27febe9bb6c
msgid "This is the outline color of the polygons. The values are in RGB format.  MapServer doesn't draw polygon outlines by default, so if you want to see polygon boundaries, you will want to define an OUTLINECOLOR."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:240
# f5e84d8f00e346639744ab859ed9d57c
msgid "This ends the first example in this tutorial. You are encouraged to change the values of the keywords in the mapfile. It will help you understand what these keywords do."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:246
# 284b2d4d7e264e958e4c2c0dc54efa72
msgid ":ref:`Back to Section 1 index <tutorial_section1>` | :ref:`Proceed to Example 1.2 <example1-2>`"
msgstr ""

#: ../../../en/tutorial/example1-1-map.txt:6
# be2509791c29413a836279d4ce8b3cfb
msgid "Example1-1.map"
msgstr ""

#: ../../../en/tutorial/example1-2.txt:7
# 82812122600447e69c83446e868960a1
msgid "Example 1.2"
msgstr ""

#: ../../../en/tutorial/example1-2.txt:10
# 1f2aeb070598428fb2b09cef7782fae6
msgid "Static Map with Two Layers"
msgstr ""

#: ../../../en/tutorial/example1-2.txt:14
# 0e0b97c1fa43496aa69b2f200aa76b92
msgid "As in the first example, this image was generated by linking the source of the <img> tag to this URL: `<http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example1-2.map&layer=states_poly&layer=states_line&mode=map>`_. This is how most of the examples in this section work."
msgstr ""

#: ../../../en/tutorial/example1-2.txt:19
# be4757bf660c4107a730806266581b24
msgid "Anyway, you'll notice that the map here is the same as the first example.  Yes, but the mapfile is different. Have a look."
msgstr ""

#: ../../../en/tutorial/example1-2.txt:22
# 53c2832c11e64bdf8fc761a061fc0c59
msgid "This is what the mapfile looks like: :ref:`Example1-2.map <example1-2-map>`"
msgstr ""

#: ../../../en/tutorial/example1-2.txt:25
#: ../../../en/tutorial/example1-3.txt:18
#: ../../../en/tutorial/example1-4.txt:26
#: ../../../en/tutorial/example1-5.txt:44
# 647043e39223486c9e4069759bf7a621
# 4a1aca022f634486977bc29cca4de8fd
# 97c89bac53e84de590b138868d886510
# ae78b8af10f44e1abbcfafd7662736cd
msgid "MapFile Structure"
msgstr ""

#: ../../../en/tutorial/example1-2.txt:27
#: ../../../en/tutorial/example1-3.txt:22
#: ../../../en/tutorial/example1-5.txt:48
# 89564edf6a4c4663ba220d7e759bedcc
# f2e37fbbcdcb462dbfb15f2e831da444
# 75a9b02f41b348b29a39576bb881ac74
msgid "The mapfile structure, by objects, looks like this::"
msgstr ""

#: ../../../en/tutorial/example1-2.txt:34
# 68ceab6a83cb412faa35c1db2e4fca5a
msgid "Here we split the original layer into two layers. The first layer is still a polygon layer but the :ref:`STYLE object <style>` no longer has OUTLINECOLOR, such as:"
msgstr ""

#: ../../../en/tutorial/example1-2.txt:52
# 0b6bacbc9cb64d039db8d87f7cf29f9b
msgid "The second layer is similar to the first except that the TYPE is changed to LINE and the COLOR in the STYLE is changed to the same color as the OUTLINECOLOR in the first example. This produces the same image as the first one."
msgstr ""

#: ../../../en/tutorial/example1-2.txt:71
# 91b9c6fb89064aa0a6c69a6c91d6de6c
msgid "So, why do it this way?"
msgstr ""

#: ../../../en/tutorial/example1-2.txt:73
# 0218ef55c7ec46579ddd54e64fa2d589
msgid "If we continue to add layers on top of the states layer, the outline will most likely be covered up by these other layers.  To still see the state boundaries after we add these other layers, we have to separate the states boundary line layer from the states polygon layer and put it on top of the other other layers.  There is order in how we define/add layers and you'll see it clearly as we proceed in this section."
msgstr ""

#: ../../../en/tutorial/example1-2.txt:83
# 13dbedc695304fa699dd75182caf7f14
msgid ":ref:`Back to Example 1.1 <example1-1>` | :ref:`Proceed to Example 1.3 <example1-3>`"
msgstr ""

#: ../../../en/tutorial/example1-2-map.txt:6
# 178c00fb87e343c5b862d587f20be7f0
msgid "Example1-2.map"
msgstr ""

#: ../../../en/tutorial/example1-3.txt:7
# 9361026ce6bd40e180fc3097cc82436d
msgid "Example 1.3"
msgstr ""

#: ../../../en/tutorial/example1-3.txt:10
# dce9076a738f4a90856de99049d2fefa
msgid "Displaying Classes in a Layer"
msgstr ""

#: ../../../en/tutorial/example1-3.txt:12
# a1c943bc38e745debe02ba0f7d09788d
msgid "By using non-spatial attribute information in the data, we can create a map like this:"
msgstr ""

#: ../../../en/tutorial/example1-3.txt:20
# 608ae5a6dedd417ab5a8ffc9345d4303
msgid "This is what the mapfile looks like: :ref:`Example1-3.map <example1-3-map>`."
msgstr ""

#: ../../../en/tutorial/example1-3.txt:32
# eab51faa8d4d45e39acaf4b8ef298866
msgid "Keywords"
msgstr ""

#: ../../../en/tutorial/example1-3.txt:34
# d08d3cd3a79b4442a568cbfd5b1c630b
msgid "Our mapfile still only has two layers but the polygon layer has been broken down into two classes.  Let's have a look at the additional parameters:"
msgstr ""

#: ../../../en/tutorial/example1-3.txt:52
# 02f3f986cf0d4391a23209ce82f7aa1f
msgid "**CLASSITEM**"
msgstr ""

#: ../../../en/tutorial/example1-3.txt:39
# 1f38d8e1e97d45ed8e64cef4e7446e00
msgid "This keyword is used to specify what attribute to use in separating the class objects.  In this example that attribute is \"CLASS\".  If you open the database file associated with this layer's shapefile, you'll see that there's a column (attribute) called \"CLASS\"."
msgstr ""

#: ../../../en/tutorial/example1-3.txt:44
# 06690c1829b546538074e548a3762c41
msgid "How do we know which attribute to use?  Well, database records in shapefiles are stored in DBF files.  You can open it in a spreadsheet program such as Openoffice.org's Calc, or in a desktop GIS software such as QGIS, Thuban, or ArcView.  If your data came with a metadata (and it should!), you can skim through through that metadata file for attribute information.  You can also use \"ogrinfo\" to display basic attribute info in your shapefiles--look back at example 1.1 (the last few lines after \"Layer SRS WKT:\" show the attribute names and types)."
msgstr ""

#: ../../../en/tutorial/example1-3.txt:59
# 213bb9db3dff4ec59bc8615f7a6385ff
msgid "**EXPRESSION**"
msgstr ""

#: ../../../en/tutorial/example1-3.txt:55
# 819c67f7d1f64807938176c8aab8a150
msgid "For each class, we specify what attribute value to use.  This is the simplest form of EXPRESSION.  EXPRESSIONs can be even more complex than this, allowing one to evaluate regular or logical expressions.  Please look at :ref:`expressions` in the mapfile reference to see what you can do with EXPRESSION."
msgstr ""

#: ../../../en/tutorial/example1-3.txt:63
# 6ecefb92758c4ab48e3ecb3edddeec00
msgid ":ref:`Back to Example 1.2 <example1-2>` | :ref:`Proceed to Example 1.4 <example1-4>`"
msgstr ""

#: ../../../en/tutorial/example1-3-map.txt:6
# 12bf557012c242a788b3d75b182a95fc
msgid "Example1-3.map"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:7
# 9231f3929e3d43f8952e30c1f16b8fc4
msgid "Example 1.4"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:10
# 3d210fe8991b43aab9f95b70ecd99095
msgid "Labeling the Map"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:12
# 5436db80118f42c5964db86b9ce5fb86
msgid "We can also add labels to our map..."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:16
# 2eec7836685f49c8a4724d93aeb43cce
msgid "MapServer has a very flexible labeling engine.  It supports native bitmap as well as truetype fonts.  Font scaling is supported with truetype. The labeling angles and placements can be customized...  If you take the time to learn the many parameters involved in creating good labels, you will be rewarded with informative and aesthetically pleasing maps."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:23
# db7d9766668f4872899343206e5a0310
msgid "This is what the map file looks like: :ref:`Example1-4.map <example1-4-map>`."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:28
# e4d3797170ac40d1a78b60081f8135a6
msgid "The map file structure, by objects, looks like this:"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:38
# 8ba28a956ebd488481a576d7276151fd
msgid "The LABEL Object and Keywords"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:40
# b0bd5bb32fe743a0b3dfafbe4fddc7c4
msgid "Here we introduce a few more parameters along with the LABEL object:"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:47
# 6dfb281797cc4e7f81d89d25309402c3
msgid "**FONTSET**"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:43
# 1204ff013c1346f58489b1e64b905eff
msgid "Here we specify the full path to our truetype fonts list (or fontset) file. This file lists each of the available fonts. See the file itself and the :ref:`MapServer fontset documentation <fontset>` for more info.  FONTSET is a parameter of the MAP object."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:51
# ac5e47fd055347ddbf89b48abd39e149
msgid "**LABELITEM**"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:50
# 0e562450816340608d9d724c1e1f483b
msgid "This specifies which data attribute to use for labeling, in this case \"STATE\". LABELITEM is a parameter of the LAYER object."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:55
# 0a24fc1d7fd146cdb8c3b1ab540a7814
msgid "**LABEL**"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:54
# b4ac01a1b2624f4ea69bc6fc115d58c2
msgid "Marks the beginning of the LABEL object. The label object can be used under other objects (i.e. the SCALEBAR object)."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:58
# b71d2cd52d834e1cbf24114a099b2f4c
msgid "Within the LABEL object, COLOR specifies the color of the label text."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:67
# 2adf26d8850b4dc88a823838efc81764
msgid "**SHADOWCOLOR - deprecated**"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:62
# bf5f1222b3b540e88626864eaaa354ea
msgid "This specifies the shadow color of the label text."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:66
#: ../../../en/tutorial/example1-4.txt:76
# 57d59617ff1a4650855dba8e04dd154d
# 6525c07ab4644236844cd89e42a7a491
msgid "Since MapServer  6, LABEL STYLE with GEOMTRANSFORM LABELPOLY must be used instead.  The tutorial files have not been updated."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:77
# 75d51957e5024667a36cd3f5955eaf0c
msgid "**SHADOWSIZE - deprecated**"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:70
# 1aa801628b554666adc4d7af5ac22496
msgid "Specifies the shadow size. The value corresponds to the X and the Y shifts in pixels. So, \"2 2\" means two pixels wide by two pixels high."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:80
# ad317ca0ef564e5c8521c3fa5ff3cf3c
msgid "Within the LABEL object, TYPE specifies what type of font to use. We have the choice of TRUETYPE or BITMAP (the built-in fonts). We choose TRUETYPE."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:86
# fc6d0cbe56bd422098fe4357c1971b01
msgid "**FONT**"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:85
# 6f36a7d926e148afa13f1ac0719ea41c
msgid "If you specify TYPE as TRUETYPE, you need to specify what font to use.  The value here is the \"alias\" in the font list file."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:89
# 513f34651c894bf5b1ecf30718c09435
msgid "If using truetype fonts, the value is size in pixels. If bitmap, you can say something like \"small\" or \"large\"."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:94
# dda0b26c82b14341aefa1648e7f441f3
msgid "**ANTIALIAS**"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:93
# 080b7ba91d544f32a16b453056115242
msgid "This turns truetype antialiasing on or off. Remember the value isn't on or off but TRUE or FALSE."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:106
# f5647e5226e24163b818ca9d465e3463
msgid "**POSITION**"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:97
# 661fb0ca1f394620b04b7f7a687fe64d
msgid "Where to position the label text in relation to the label points. The value is a combination of vertical and horizontal positions. You have the following choices for vertical alignment: C for center, U for upper, and L for lower. For horizontal alignment you have the following choices: C for center, L for left, and R for right. So, to align the label text to the center of label ID you'd use the value \"CC\" (center-center). Or if you'd like it to be on the lower left of the ID, you'd use LL. Another way is to let MapServer decide the best position for your labels. For this you would use the value \"AUTO\"."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:111
# 817a01e44cc549d59d305d8bc487c994
msgid "**PARTIALS**"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:109
# 3c881a0e932143f4bdc6bf3a1c6f2b54
msgid "Tells MapServer whether to generate incomplete label texts or not. The default here is not to generate fragments of a label text. The value is either TRUE or FALSE."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:115
# 5b36d0287f1e477bb1fcca5d4524a2f5
msgid "**MINDISTANCE**"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:114
# 0acadeda96294e59980f6754cdce3be4
msgid "This is the minimum distance in pixels between duplicate labels. See what happens if you increase or decrease this value."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:117
# f5d19ca2248848c69fbea28a8bbb55f8
msgid "**BUFFER**"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:119
# 4f6d158c36274d9984609b136d12dd49
msgid "The padding (in pixels) for each label. This is used to enhance readability. A BUFFER of 4 pixels mean that no label will be drawn within four pixels of each other. Again, change to see how it works."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:124
# 47b90d1c68f94b37a2dbe31bf19719d0
msgid "You can also create labels separate from a POLYGON layer. You do this with the ANNOTATION data type. Have a look at the next example's map file to see how you'd implement this kind of labeling.  You will notice that the CLASS object within the \"label\" layer has a COLOR parameter value of \"-1 -1 -1\". The negative number tells MapServer to give this CLASS a transparent color (the label IDs don't show up). Once again, play with the values to understand how it affects the map."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:134
# e39d4bcf29624756bf04a205baf07b4d
msgid ":ref:`Back to Example 1.3 <example1-3>` | :ref:`Proceed to Example 1.5 <example1-5>`"
msgstr ""

#: ../../../en/tutorial/example1-4-map.txt:6
# 10eab0df12064e629eb61b706ac52feb
msgid "Example1-4.map"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:7
# cdde2d12ada843e3800a19cd240ccc9b
msgid "Example 1.5"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:10
# 11dcce8a700849dd865f342694ede1e8
msgid "Adding a Raster Layer"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:14
# f534931821fa41e79847ca91d88392a3
msgid "In addition to vector data support (point, lines, polygons, and annotations), MapServer can also display raster data. Through the use of GDAL library, MapServer can input and output multiple raster formats. Whereas in versions prior to 4.x raster input is limited to single layer, grayscale or indexed color images, recent MapServer versions support RGB and multispectral (multi-layer) images. This example shows how to select what layers to display when using multispectral data."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:25
# b57f4a3b04484f08b41d6d4923c1612b
msgid "There might be a noticeable performance hit when using RGB and multispectral images."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:28
# 86a03b89f0314fd8b657536b898c65be
msgid "Because MapServer 5.x uses AGG or GD version 2.0.x to generate output images, it supports RGB (24-bit or true color) output as well. So, along with 8-bit (indexed color or grayscale) PNG8, you can now also use PNG (true color) for output. This example uses PNG as IMAGETYPE."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:36
# ac53781f363b4baebf351abbf152d48c
msgid "As with RGB input, there might be a noticeable performance hit when using PNG compared to PNG8."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:39
# 186d752695c046adbf2634e2a5367e5f
msgid "MapServer can actually use GDAL to generate output images as well, but that's another topic. If you want to know more about it, look at the :ref:`OUTPUTFORMAT <outputformat>` object in the mapfile reference."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:46
# b000ca877600481c87b099fa9165ebe3
msgid "This is what the mapfile looks like: :ref:`Example1-5.map <example1-5-map>`"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:59
# 0bdb2ee8cf5a46cd9361103683a9fac4
msgid "When you look at the mapfile, you'll see that the new LAYER object is added below (after) the state POLYGON layer. Why? MapServer displays layers in reverse order: last in, first out (LIFO). The first layer defined in the mapfile is drawn at the bottom of the map."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:64
# bc0c55b34ebc47deaa57410fd11ab712
msgid "So, if we have drawn the state POLYGON layer, it would be on the bottom. Since the raster layer gets drawn on top of it, we won't see it. That's why the first layer gets the STATUS value of OFF. The state LINE layer is defined below the raster layer so it gets drawn on top (and you can see it). This is why we separated the state LINE layer from the state POLYGON layer. Of course the labels get drawn on top of everything."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:71
# 781560c4d2df4c2ebff6950e5be79662
msgid "MapServer can automatically turn layers on or off based on the status of other layers (say you want the states polygon layer turned off when the raster layer is turned on). This is done by using the REQUIRES parameter. Keep this in mind as you might want to use it once you start creating your own MapServer applications."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:78
# 2a0f4d0a10f442f88e2cdf7eb11ac54f
msgid "Parameters"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:80
# 8ce24b621f4145b9a6f1187baa6f77f2
msgid "Let's have a look at the new parameters introduced in the mapfile:"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:83
# b86f4845d62b4bee83922622c32519c9
msgid "PNG is the 24-bit or true-color version of the PNG format.  By the way, try changing this value to PNG8.  Notice the time it takes to generate the image using either formats. In choosing between true color and indexed color, take into account the time it takes to generate the image."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:94
# 529c66def97742b490f1054db969321b
msgid "**SYMBOLSET**"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:90
# 183d7aab892a4728bb4116b8605d4394
msgid "Points to the path of the symbol definition file. The symbols in this file are referenced by the SYMBOL parameter in the :ref:`CLASS <class>` object.  It's not really needed at this point but I thought I'd throw this here now.  Please refer to the :ref:`Cartographic Symbol Reference <sym_construction>` for further information."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:103
# edd3aff3484b4bdf8b5c006448d715e0
msgid "**DATA raster/mod09a12003161_ugl_ll_8bit.tif**"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:97
# 2b979fcb5aee49ac9defa0dc6df3ec2c
msgid "In the newly added LAYER object, the DATA parameter points to a GeoTIFF image.  Like vector datasets, MapServer supports multiple raster file formats. This support is accomplished through use of the GDAL library. For more information on the different raster formats supported by MapServer and for general discussion on the use of rasters in MapServer, please read the :ref:`Raster Data Reference <raster>`."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:108
#: ../../../en/tutorial/example1-7.txt:51
# 2dae9e7ad26e47ec989b98cecd336d6e
# fb395edcd7fb49e2889ac2e23110bbd7
msgid "**TYPE RASTER**"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:106
# 31508847867545f7b43e379007f5d956
msgid "When using raster data (images) we use the value RASTER for the parameter TYPE, as opposed to the POLYGON, LINE, and POINT values for vector data and ANNOTATION for label IDs."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:115
# b8dcff42bca34d77875759e32990c59e
msgid "**PROCESSING \"BANDS=1,2,3\"**"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:111
# 7561b45001a24907b07c1ad10c4997fa
msgid "This LAYER object parameter was added in MapServer 4.x. The :ref:`PROCESSING <layer>` keyword has many values but in this case we are using it to select which bands in a multispectral image to display. The values here are strings that will be passed to the GDAL library."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:121
# 3ff50ee0dfc04db8bc3dcefc99f417ef
msgid "**OFFSITE**"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:118
# f40d475eaa7643f883ef465ebae5a2d2
msgid "This parameter tells MapServer what pixel values to render as background (or ignore). You can get the pixel values using image processing or image manipulation programs (i.e. Imagine, Photoshop, Gimp)."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:124
# fbddc766274045168ec6535bebe566af
msgid "RGB vs Indexed Color Image"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:126
# 78007b2fd9004ad288598200615583d9
msgid "To compare map creation speed when using RGB image as opposed to indexed color image, replace the following lines in the mapfile:"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:137
# 92fbdffc0c0e4d0fad4afbf0f3decc98
msgid "with these:"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:147
# dac2943db67d42f88fb23a6298088713
msgid "Also, try changing the IMAGETYPE from PNG to PNG8."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:151
# 88116f768c414304a9caa1076cc8971d
msgid ":ref:`Back to Example 1.4 <example1-4>` | :ref:`Proceed to Example 1.6 <example1-6>`"
msgstr ""

#: ../../../en/tutorial/example1-5-map.txt:6
# df8752ec1ccb4bb4b96cf4785bbc1758
msgid "Example1-5.map"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:7
# 04e8f26b12f84ae7a6e2d9f88f8751f8
msgid "Example 1.6"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:10
# a5e33e0cb05a40bcbd6ad257e4d43fe8
msgid "Defining Projections and Extents"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:14
# da71491c0b0e4f5fb07276a1e4703f0c
msgid "Whoa! What happened here?"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:16
# 354620564bfb48f0b59506df6a040fd6
msgid "You've just experienced on-the-fly reprojection. When a PROJECTION object is defined in the mapfile, MapServer passes the layer and projection info to the Proj.4 library which does the reprojection.  For more information about the Proj.4 library, please visit `<http://proj.maptools.org/>`_."
msgstr ""

#: ../../../en/tutorial/example1-6.txt:21
# b53b32b42fae453bb16483a04ed30c2a
msgid "This example attempts to shed some light on the projection support in MapServer."
msgstr ""

#: ../../../en/tutorial/example1-6.txt:23
# 01e7a1f79a884c1189ccc7c771518b94
msgid "This is what the mapfile looks like: :ref:`Example1-6.map <example1-6-map>`"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:25
# 1d7a95c37e8c444c958e674966cf9e5e
msgid "The first thing you might have noticed with our mapfile is the original EXTENT has been commented out and the new EXTENT values don't look anything like latitude and longitude values. Also, we have added a PROJECTION object near the top and within each of our layers."
msgstr ""

#: ../../../en/tutorial/example1-6.txt:30
# 1e86cf2551f04236add8a22a5c98d418
msgid "Let's have a look at the new object and parameter::"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:34
# 04d75ca9c34349fbbe5c8de3223e1855
msgid "The extent we provide to MapServer needs to be in the same units as the output projection.  Since Lambert Azimuthal Equal-Area's units are in meters, we have to give the new extent in meters.  We can calculate the new extent using ArcView or some other GIS package, or you can use Proj.4's cs2cs utility.  The command below is what can be used to reproject the original extent values::"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:42
# d53a79cf9f4e48a291cbb397284b1d64
msgid "After typing the command, enter the southwestern coordinate pair (the lower left coordinates), separated by a space::"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:47
# 1534f9bf656c4bba8799eec17c67c854
msgid "to which the \"cs2cs\" utility gives the values::"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:51
# 7f5387cd1a974b749b7d2b8284713dcd
msgid "I then type the northeastern coordinate pair (upper right corner coordinates), again separated by space::"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:56
# abf76ec1f3324a3cabb1c5abb770824e
msgid "and the following values are returned::"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:60
# 75fbbbf91b8f44388fb9ea6bf0cb9f39
msgid "You will notice that \"cs2cs\" returns a set of three values.  You can ignore the third value, 0.000, as it means to represent altitute (which we're not using). Anyway, we can now present the EXTENT as::"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:66
# f8d149dde02c48b49e66f9bcbd709b15
msgid "But it doesn't match up the extent above, you say.  Well, that's what usually happens when you reproject -- the map doesn't necessarily get centered as you'd expect.  You can fudge around it, taking a few thousand meters off to the left and adding a few to the right.  Or, you can use a graphical GIS package to give you the extent. `Here are the instructions <http://biometry.gis.umn.edu/tutorial/arcview_extent.html>`_ for getting `EXTENT` using ArcView."
msgstr ""

#: ../../../en/tutorial/example1-6.txt:74
# 8124211ac09640ca9a8a7b73b4183d30
msgid "MapServer can take projection definitions in two ways. The first is shown in the mapfile's output PROJECTION object (the first PROJECTION block). This is the traditional way of passing parameters to the Proj.4 library. The other way is to use the EPSG codes. These codes are standard projection codes (or spatial reference identifiers) as defined by the European Petroleum Survey Group (EPSG). In the case of our Lambert Azimuthal Equal-Area projection, it has a code of \"2163\". If you comment out the four lines after PROJECTION and uncomment the line \"init=epsg:2163\", this will provide the same information to Proj.4. If you want to learn more about EPSG codes, have a look at \"/usr/local/share/proj/epsg\" or \"C:/proj/nad/epsg\" (\"/ms4w/proj/nad\" in MS4W)."
msgstr ""

#: ../../../en/tutorial/example1-6.txt:85
# a5679fc93f2b407a8f200ae695890a46
msgid "Also, check out the EPSG web site at `<http://www.epsg.org>`_."
msgstr ""

#: ../../../en/tutorial/example1-6.txt:87
# 57415774ca554813b76723662e4eb54c
msgid "If you need to learn more about projections, please look through some of the links below:"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:89
# 6e8b27730a294b61bb323da5ef160159
msgid "`<http://www.colorado.edu/geography/gcraft/notes/mapproj/mapproj_f.html>`_"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:91
# 1bdfd88e82444d8f8756666f244880a8
msgid "`<http://www.geography.hunter.cuny.edu/mp/>`_"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:93
# 197d0f5e85414cec9733a307e0185416
msgid "`<http://www.nationalatlas.gov/articles/mapping/a_projections.html>`_"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:95
# 2311d47aca3143be905f5a409f3dd5e8
msgid "`<http://en.wikipedia.org/wiki/Map_projection>`_"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:97
# 5613104076384d2bb560d9708c5e6639
msgid "`<http://erg.usgs.gov/isb/pubs/MapProjections/projections.html>`_"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:99
# 9194098ecc1d45db8045abf37d2962da
msgid "`<http://spatialreference.org/>`_"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:101
# a52c7c4b2f4e485f9063d55d8efd5098
msgid "You can find more by searching the web for \"map projection\"."
msgstr ""

#: ../../../en/tutorial/example1-6.txt:105
# 5d711bb9e2354734995fdd7f99556d4f
msgid ":ref:`Back to Example 1.5 <example1-5>` | :ref:`Proceed to Example 1.7 <example1-7>`"
msgstr ""

#: ../../../en/tutorial/example1-6-map.txt:6
# 98ffa4fa22ae4d7f835b550f9d3d264c
msgid "Example1-6.map"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:7
# e17ab2c131924acdb26d8768d12844da
msgid "Example 1.7"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:10
# f8ac0ba8fa6d43a1963edc4cea2d66a7
msgid "Adding OGC WMS Layers"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:14
# fb3b923a2e6b4061a046ae93f04f2161
msgid "Another exciting feature of MapServer is its ability to use layers from other map servers. In this case, a MapServer application becomes a WMS (or WFS) client. MapServer can also share (or serve up) the layers in the mapfile to other map servers. This makes an application a WMS (or WFS) server. What is WMS or WFS? These are \"web-based interoperability service\" specifications published by the Open Geospatial Consortium (OGC). WMS stands for Web Map Service and WFS for Web Feature Service. The difference between these two specifications, in simple terms, is that WMS uses web raster formats (PNG, GIF, JPEG) to share layers while WFS uses GML, the Geography Markup Language. A third OGC interoperability specification is the Web Coverage Services specification or WCS.  MapServer supports WCS at the server level only. To find more information about WMS, WFS, and WCS go the the `OGC's web site <http://www.opengeospatial.org>`_ and look for the `OGC Implementation Specifications <http://www.opengeospatial.org/specs/?page=specs>`_ or `OGC Abstract Specifications <http://www.opengeospatial.org/specs/?page=abstract>`_. The MapServer web site also has :ref:`documentation <documentation>` and `WIKI pages <https://github.com/mapserver/mapserver/wiki>`_ for these specifications."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:32
# 102a72de554a4168ae1de824e318ec4c
msgid "This example shows you how to add a WMS layer in your mapfile."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:35
#: ../../../en/tutorial/example1-8.txt:19
# 0b84d85d1ece491d9c6c80567eab8b75
# 7f54d6ac6fe647118e621c4087697701
msgid "The MapFile"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:37
# 9c0c3085c95f45569af1ff4302de0286
msgid "This is what the mapfile looks like: :ref:`Example1-7.map <example1-7-map>`"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:40
# 4fd6271c1a1b4104a95340d91a3ea1ba
msgid "LAYER Object and WMS Parameters"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:42
# 68d1fcd91496416898d11184f2d79e4b
msgid "Let's have a look at the WMS layer:"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:45
# b9ef119cd40e41118898edfaf34b657f
msgid "**LAYER # MODIS WMS map from JPL**"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:45
# af74e7f8f8ee4f2eaea09cb1ec197f8d
msgid "Marks the start of the WMS LAYER object."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:48
# 4c4de087f2bd40adab9697edd2bfe60a
msgid "**NAME modis_jpl**"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:48
# 4088479ff11d41d689e28ebfec396c05
msgid "The LAYER identifier."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:51
# 3c6241e08f824d03a0e42ea6b8066c0e
msgid "Since this the WMS layer is an image, we use RASTER as LAYER TYPE."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:54
# c4948b323d1649d9831298206207b3aa
msgid "**OFFSITE 0 0 0**"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:54
# 9a711afd2f2d462e8ac91acca66f90ec
msgid "Ignore the black background color"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:57
# 3735ffa609a34aeda9ee7ca20cb96563
msgid "**STATUS OFF**"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:57
# b8f95c26272f424a8b96c06367a5d038
msgid "Turn this layer off by default."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:67
# 36f5ed2ef7a1402bb1a9ee87b11160de
msgid "**CONNECTIONTYPE WMS**"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:60
# d2f0406eaaaf44109f5dd5f9e3076cd7
msgid "The type of LAYER connection to use. The default is LOCAL."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:64
# 9a9fd01f8810439a945b53cc3b0a6105
msgid "If we have to be explicit, we would add CONNECTIONTYPE LOCAL to all othe vector and raster layers in our mapfile. Instead we only define connection types that are external. WMS is an external data layer, coming from another map server."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:73
# 24aabd09af5542c98e29073276543039
msgid "**CONNECTION \"http://mapus.jpl.nasa.gov/wms.cgi?\"**"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:70
# 9a1656de8f434ce9977fe90d5ae8c6b5
msgid "The connection string that allows us to *get* the data from another server. In the case of WMS connections, this is a URL.  If we were using a PostGIS database, it would be an SQL statement.  Please note that the string has to be in a single line in your mapfile."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:79
# 82fb2e8711cd42e89e83b1d0d7c03c7a
msgid "**METADATA**"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:76
# 48f7885261714862a0ed60464b5272d6
msgid "marks the beginning of the METADATA object for our WMS layer. MapServer uses the parameters defined within this object along with the CONNECTION parameter above to form a valid WMS request to the WMS server."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:85
# 91af96427980404cb45db4359cd1703d
msgid "**\"wms_srs\" \"epsg:4326\"**"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:82
# fed3fad620ee453a837be93668c52a69
msgid "The WMS projection.  Sometimes the WMS server supports more than one projection.  If this is the case you might want to request the map in your output projection (epsg:2163).  Unfortunately, the JPL server doesn't support this projection."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:88
# fa1003f7942b4f19bc136313a16ff491
msgid "**\"wms_name\" \"modis\"**"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:88
# 0743dcb4edaa4422a64630b5afa3f3fa
msgid "The WMS layer name. This is like adding the parameter \"layers=modis\"."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:92
# 8cb2865b1e4b455b944e15cd5367cf36
msgid "**\"wms_server_version\" \"1.1.1\"**"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:91
# 88b3a50a59d9493eae65619d36b5b33c
msgid "The WMS version the server complies to.  For more options, see :ref:`ogc_support`."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:96
# a66d459604a04dbe8a99a87677b3ead5
msgid "**\"wms_format\" \"image/jpeg\"**"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:95
# 1de24ce6b3e84635a79feb8c1c6d9179
msgid "The image format we expect to be receiving from the WMS server. You can try replacing the value with *image/png* or something else."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:99
# 40125dac49514cafbe427d90e4203768
msgid "**END**"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:99
# 7d72b50dd2aa4897b7803227a3ba5dff
msgid "marks the end of the METADATA object"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:101
# 0769f50f5f274feab7833f070cfd4ba9
msgid "To know more about adding WMS layers to your applications, please visit the :ref:`MapServer WMS Client Howto <wms_client>`."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:105
# a75deee2e5a1472c8387e423cf1d3750
msgid "WEB Object Parameters"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:107
# 9848f728651a40b8a3007a9541c9cf78
msgid "In addition to adding the WMS layer object, there's also a new object under MAP. This is the WEB object. Within the WEB object are two parameters:"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:114
# 67eb569a91b3416784c68b79757a4431
msgid "**IMAGEPATH '/data/tmp/'**"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:110
# f44f4c2060d3428e8639afd68df3b41e
msgid "The absolute local path to a web accessible temporary directory. The user running the web server processes should be able to write to this directory. Make sure that the path includes a slash (/) at the end. (Your IMAGEPATH might look something like this: \"/home/apache/htdocs/tmp/\" or \"C:/Inetpub/wwwroot/tmp/\".)"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:120
# f15f37291fc948d7ae8415922d1e3e93
msgid "**IMAGEURL '/tmp/'**"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:117
# 317405a8e8d14a24b9b9b0720325f4d4
msgid "This is how IMAGEPATH will appear relative to the web server's root directory. If we have to type the full URL for this, it will be \"http://terrasip.gis.umn.edu/tmp/\". Make sure that the path includes a slash (/) at the end."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:124
# 6d6b57966f8749578be22d2ed9a7ed1b
msgid "Finally, within the MAP object, I added a new parameter: NAME. This is the identifier for the MAP object. MapServer uses this as prefix to all images it creates and dumps to the *tmp* directory.  It's not needed at this point but it also doesn't hurt to have it."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:129
# 915f56a97fb64a95b8221590b30e3e01
msgid "If you would like to share your data layers to other map servers, you will need to add METADATA objects within your MAP object and within each of the LAYER objects you would like to share. All the WMS layers that you added from another server will automatically be cascaded and will also become available to others. To know more about how to make your MapServer application become a WMS server, please read the :ref:`MapServer WMS Server HowTo <wms_server>`.  Documentation also exists for configuring MapServer applications to support the WFS standard, both as a :ref:`server <wfs_server>` and as a :ref:`client <wfs_client>`."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:142
# 37c5a8bb13a74cb68253aaaf8afa4f6a
msgid ":ref:`Back to Example 1.6 <example1-6>` | :ref:`Proceed to Example 1.8 <example1-8>`"
msgstr ""

#: ../../../en/tutorial/example1-7-map.txt:6
# c0b17e48dca34c8690579eebbe72d842
msgid "Example1-7.map"
msgstr ""

#: ../../../en/tutorial/example1-8.txt:7
# 23e545c8c409400d9b7af27497ff7ad5
msgid "Example 1.8"
msgstr ""

#: ../../../en/tutorial/example1-8.txt:10
# 3355f77e61fa4fb694e29974acdc00dd
msgid "Changing the Map's Output Format"
msgstr ""

#: ../../../en/tutorial/example1-8.txt:14
# 288929769e07408a9378f28580468ab2
msgid "Depending on the format you choose, the image may not display on your browser. If the link fails to display on your browser, right click on the graphic above and save the link as whatever format you specified on your mapfile."
msgstr ""

#: ../../../en/tutorial/example1-8.txt:21
# d0f0b3b434ca49cf80b41094d821cd81
msgid "Here's the mapfile: :ref:`Example1-8.map <example1-8-map>`"
msgstr ""

#: ../../../en/tutorial/example1-8.txt:24
# a9f22867361a40efb641026a5d72251e
msgid "OUTPUTFORMAT Object"
msgstr ""

#: ../../../en/tutorial/example1-8.txt:26
# 3f1fdb27b15b4904a6f501c12211de1e
msgid "Our mapfile now contains a new object, OUTPUTFORMAT. This object is defined within the MAP object and is used in conjunction with the IMAGETYPE keyword.  Depending on the libraries you compiled with MapServer, you can have several output format choices.  The AGG library provides PNG, PNG8 and JPEG; The GD library provides GIF; the GDAL library, a source for many of MapServer's input formats, can also provide output to PNG, JPEG, TIFF/GeoTIFF, and other raster formats; the Cairo library provides PDF, PNG and SVG output.  Have a look at the OUTPUTFORMAT object and experiment by changing the IMAGETYPE keyword on you mapfile. The NAME of your OUTPUT format should be used as your IMAGETYPE value ex: IMAGETYPE png or IMAGETYPE png24)."
msgstr ""

#: ../../../en/tutorial/example1-8.txt:38
# 66c30e4096a74327b699186dc16929b0
msgid "Please consult the :ref:`OUTPUTFORMAT object reference <outputformat>`."
msgstr ""

#: ../../../en/tutorial/example1-8.txt:42
# 72df158108aa4091aaee933db14245d0
msgid ":ref:`Back to Example 1.7 <example1-7>` | `Proceed to Example 1.9 <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example1-9.map&layer=states&layer=modis>`_"
msgstr ""

#: ../../../en/tutorial/example1-8-map.txt:6
# 8a25f01560224909a8a6ce030d100109
msgid "Example1-8.map"
msgstr ""

#: ../../../en/tutorial/index.txt:8
# eac97b326c82485580a4b15ea4e55dc2
msgid "MapServer Tutorial"
msgstr ""

#: ../../../en/tutorial/index.txt:10
# 6c0c5d1b06a44c8182eddb7e7c2043f6
msgid "Pericles S. Nacionales"
msgstr ""

#: ../../../en/tutorial/index.txt:11
# ba16775447e34d50abd758ec2347c5d0
msgid "pnaciona at gmail.com"
msgstr ""

#: ../../../en/tutorial/index.txt:12
# 88054294184a4ad3956e3967b6c8c741
msgid "Jeff McKenna"
msgstr ""

#: ../../../en/tutorial/index.txt:13
# df37029f6578498a8af7c15138fc6569
msgid "jmckenna at gatewaygeomatics.com"
msgstr ""

#: ../../../en/tutorial/index.txt:14
# 3938e47ff7ee49e9a6a1971bba792de5
msgid "2010-04-07"
msgstr ""

#: ../../../en/tutorial/index.txt:16
# 862f270a7ef740f9aeec149c719bc2fd
msgid "This tutorial was designed to give new users a quick (relatively speaking) introduction to the concepts behind MapServer. It is arranged into four sections with each section having one or more examples and increasing in complexity.  Users can jump to any section at any time although it is recommended that absolute beginners work on the first three sections sequentially."
msgstr ""

#: ../../../en/tutorial/index.txt:23
# 6aa1c0fae2e149ce85ae6bf102f85847
msgid "Section one focuses on basic MapServer configuration concepts such as layer and class ordering, using vector and raster data, projections and labeling.  Section two provides examples on how to use HTML templates to create a simple interface for an interactive web mapping application. Section three introduces the use of HTML templates to provide a \"query\" interface. Finally, section four introduces some advanced user interface concepts."
msgstr ""

#: ../../../en/tutorial/index.txt:42
# 0eb27a3bf79a49be88cd9695b6aabcc4
msgid ":ref:`Begin tutorial <tutorial_background>`"
msgstr ""

#: ../../../en/tutorial/index.txt:1
# 471254557a6b47168ba9b5cb14be93c4
msgid "Tutorial"
msgstr ""

#: ../../../en/tutorial/section1.txt:4
# d99d671afca84b04b57edc87dbc06257
msgid "Section 1: Static Maps and the MapFile"
msgstr ""

#: ../../../en/tutorial/section1.txt:6
# cb5a6b60b0ce42aa86f8a6822dbf685a
msgid "Take a Shapefile dataset. Any Shapefile dataset.  We can use MapServer to display that Shapefile dataset in a web browser. Look..."
msgstr ""

#: ../../../en/tutorial/section1.txt:10
# a5d490716da14d63b65a7d06a40b2b50
msgid ":ref:`Example 1.1 - A map with a single layer <example1-1>`"
msgstr ""

#: ../../../en/tutorial/section1.txt:12
# a6d6d099fd334783b2178225c78b942c
msgid "We can display the same Shapefile dataset repeatedly. We can display the polygon attributes in one LAYER and the line attributes in another..."
msgstr ""

#: ../../../en/tutorial/section1.txt:16
# a607f6f5b89747fa8af8e3f256aa448a
msgid ":ref:`Example 1.2 - A map with two layers <example1-2>`"
msgstr ""

#: ../../../en/tutorial/section1.txt:18
# 83aea7294d114d80bea35642dfef9f62
msgid "And we can select which parts of the Shapefile dataset to display. We do this using the CLASS object..."
msgstr ""

#: ../../../en/tutorial/section1.txt:21
# ce9141ea1f3a49a7be3982f69437a7e3
msgid ":ref:`Example 1.3 - Using classes to make a \"useful\" map <example1-3>`"
msgstr ""

#: ../../../en/tutorial/section1.txt:23
# 210b303baff84c43a330633ebd3da49b
msgid "We can also label our maps..."
msgstr ""

#: ../../../en/tutorial/section1.txt:25
# e485680dceea4c95be427089866e04ad
msgid ":ref:`Example 1.4 - Labeling layers and label layers <example1-4>`"
msgstr ""

#: ../../../en/tutorial/section1.txt:27
# 00d58f77e5d84cf8a5edf573d474c680
msgid "Or add raster data such as satellite images, aerial photographs, or shaded reliefs..."
msgstr ""

#: ../../../en/tutorial/section1.txt:30
# 1d613805c1e7407b8e8be38b2150d9d6
msgid ":ref:`Example 1.5 - Adding a raster layer <example1-5>`"
msgstr ""

#: ../../../en/tutorial/section1.txt:32
# 4e0d3674a3494451bceef0fbdc7a14c5
msgid "We can reproject our data from just about any projection to just about any... Yeah, check it out!"
msgstr ""

#: ../../../en/tutorial/section1.txt:35
# 6bca12828ebb484daa628cc0837a1fd7
msgid ":ref:`Example 1.6 - Projection/Reprojection <example1-6>`"
msgstr ""

#: ../../../en/tutorial/section1.txt:37
# 52e9bbbafc4647fab72d6eef9dd27d12
msgid "And we can use layers from other map servers on the Internet (for example WMS servers)..."
msgstr ""

#: ../../../en/tutorial/section1.txt:40
# 9c8c1ae4259640999c2cc0e8c1618cd7
msgid ":ref:`Example 1.7 - Adding a WMS layer <example1-7>`"
msgstr ""

#: ../../../en/tutorial/section1.txt:42
# 24d857a4094649d58814504983d08f05
msgid "MapServer can output to various formats such as PDF and GeoTIFF."
msgstr ""

#: ../../../en/tutorial/section1.txt:44
# 5ee04267ed404cc7826892a8dd7fb656
msgid ":ref:`Example 1.8 - A different output format <example1-8>`"
msgstr ""

#: ../../../en/tutorial/section1.txt:46
# e5b7d34217c64cab8a96ffb3bc066305
msgid "MapServer not only generates static maps, it can also create interactive maps..."
msgstr ""

#: ../../../en/tutorial/section1.txt:49
# 5bc817bc257d46519016cb9874772b51
msgid "`Example 1.9 - The difference between map mode and browse mode <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example1-9.map&layer=states&layer=modis>`_"
msgstr ""

#: ../../../en/tutorial/section1.txt:53
# bb872dba5c5d444da96995812ce55269
msgid ":ref:`Back to Tutorial home <tutorial>` | :ref:`Proceed to Section 2 <tutorial_section2>`"
msgstr ""

#: ../../../en/tutorial/section2.txt:4
# 180e97ab771147b496ceb6e5f5cbd8f9
msgid "Section 2: CGI variables and the User Interface"
msgstr ""

#: ../../../en/tutorial/section2.txt:6
# ad4f44a8be5a45a0937db6af7107f22a
msgid "So far we have only looked at the mapfile when creating maps. In creating web mapping applications, it is usually our intention to make maps that can be changed by the user (of the application) interactively. That is, a user should be able to change the content of (or the information in) the map. To accomplish this interactivity, we use the MapServer HTML templates."
msgstr ""

#: ../../../en/tutorial/section2.txt:14
# 164f95de3f0c409a82ea99ed03c7fd43
msgid "HTML Templates"
msgstr ""

#: ../../../en/tutorial/section2.txt:16
# 08abe479c53e4a71bf87947872715d51
msgid "A MapServer HTML template is essentially an HTML file with a few MapServer specific tags.  These tags are the MapServer CGI variables and are enclosed in square brackets \"[]\".  When the MapServer CGI program processes an application, it first parses the query string and the mapfile, and produces the necessary output. Some of this output will need to be written to the HTML template file which you would have to also specify in the mapfile using the web template keyword (or in a separate HTML initialization file). The CGI program will replace all the variables in the HTML template with the proper value before sending it back to the web browser. If you are to directly view an HTML template in a web browser, there won't be any maps rendered and you will instead get blank images and other junk."
msgstr ""

#: ../../../en/tutorial/section2.txt:30
# 691f7a69b6bd410cb4fbafe54aca5304
msgid "Variables"
msgstr ""

#: ../../../en/tutorial/section2.txt:32
# 176f5c248f734a8dba5a7c8a10ae2b80
msgid "MapServer provides several variables for web mapping: the \"img\" variable which you've seen in Example 1.9 is but one example. There area few core CGI variables originally designed as part of the mapping interface but practically all the mapfile parameters can be defined as variables. The definitive reference to the MapServer  CGI variables can be found :ref:`here <cgi>`."
msgstr ""

#: ../../../en/tutorial/section2.txt:39
# c5ee1602548d4ba69a0be366bdcf4d95
msgid "We can also define our own variables, which MapServer will pass along to our application.  For example, we can create a variable called \"root\" to represent the root directory of this tutorial, the value for \"root\" will then be \"/tutorial\". When the MapServer CGI program processes our HTML template, it will replace every instance of he \"[root]\" tag with \"/tutorial\". You will see this in action for each of the following examples."
msgstr ""

#: ../../../en/tutorial/section2.txt:48
# 6aa6194b60ba4f35b6432386088753e5
msgid "Examples"
msgstr ""

#: ../../../en/tutorial/section2.txt:50
# 704846cf308948aba3c13d7029a8fcc2
msgid "So, let's build an interactive interface for our application..."
msgstr ""

#: ../../../en/tutorial/section2.txt:52
# 17ea81cdf85f43fbb5e38b6496fdfebf
msgid "Users of a web mapping application should be able to pan and zoom on the map: `Example 2.1 - Pan and Zoom Controls <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example2.map&layer=states&zoom=0&mode=browse&root=/tutorial&program=/cgi-bin/mapserv&map_web=template+example2-1.html>`_"
msgstr ""

#: ../../../en/tutorial/section2.txt:55
# 2aa06c926fcb4767b3f2980429dbdc90
msgid "They also should be able to turn on and off layers on a map: `Example 2.2 - Layer Control <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example2.map&layer=states&zoom=0&mode=browse&root=/tutorial&program=/cgi-bin/mapserv&map_web=template+example2-2.html>`_"
msgstr ""

#: ../../../en/tutorial/section2.txt:58
# 90fcc9f5ce8e49bda8c3c96f1e5f2057
msgid "A map should always include a scalebar. `Example 2.3 - Adding a Scalebar <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example2.map&layer=states&zoom=0&mode=browse&root=/tutorial&program=/cgi-bin/mapserv&map_web=template+example2-3.html>`_"
msgstr ""

#: ../../../en/tutorial/section2.txt:61
# d46f2375bdfe499fad3614dcd31c8d89
msgid "If users are to navigate through the map, a reference map should be provided: `Example 2.4 - Adding a Reference Map <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example2.map&layer=states&zoom=0&mode=browse&root=/tutorial&program=/cgi-bin/mapserv&map_web=template+example2-4.html>`_"
msgstr ""

#: ../../../en/tutorial/section2.txt:64
# 220c5a46664b473694ed58273a4e6cd1
msgid "The map should include a legend. `Example 2.5- Adding a Legend <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example2.map&layer=states&zoom=0&mode=browse&root=/tutorial&program=/cgi-bin/mapserv&map_web=template+example2-5.html>`_"
msgstr ""

#: ../../../en/tutorial/section2.txt:69
# 8c544e9537f845bdba105d2145e33d55
msgid ":ref:`Back to Section 1 index <tutorial_section1>` | :ref:`Proceed to Section 3 <tutorial_section3>`"
msgstr ""

#: ../../../en/tutorial/section3.txt:4
# ae8dc6dbe0d14cfea71f5b019d1f1255
msgid "Section 3: Query and more about HTML Templates"
msgstr ""

#: ../../../en/tutorial/section3.txt:6
# 756ea64825974a20831b30604b628240
msgid "To learn more about query and HTML templates with MapServer, see examples 3.1 to 3.4 in the `Tutorial Viewer <http://demo.mapserver.org/tutorial/section3.html>`_."
msgstr ""

#: ../../../en/tutorial/section3.txt:13
# 7c39b7508c294b8baaf8278fbcd0b8ca
msgid ":ref:`Back to Section 2 index <tutorial_section2>` | :ref:`Proceed to Section 4 <tutorial_section4>`"
msgstr ""

#: ../../../en/tutorial/section4.txt:4
# eceaf747ac8942c89b5182ecc4aee30e
msgid "Section 4: Advanced User Interfaces"
msgstr ""

#: ../../../en/tutorial/section4.txt:6
# 7dc1a8b93e7145c999b533b680b64787
msgid "To learn more about advanced navigation such as pan and rubber-band zoom with Javascript and MapServer CGI, see examples 4.1 to 4.4 in the `Tutorial Viewer <http://demo.mapserver.org/tutorial/section4.html>`_."
msgstr ""

#: ../../../en/tutorial/section4.txt:13
# b3f037ba024e4b2d822920c990743b32
msgid ":ref:`Back to Section 3 index <tutorial_section3>` | :ref:`Tutorial home <tutorial>`"
msgstr ""

